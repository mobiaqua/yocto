From 49c118438246253814ba577bb9e6ea8d0a0c6c3b Mon Sep 17 00:00:00 2001
From: Alexander Kanavin <alex@linutronix.de>
Date: Fri, 6 Jan 2023 08:46:38 +0100
Subject: [PATCH 17/21] When detaching, wait for the child process to
 initialize fully.

This way the pid file can be checked immediately following exit of the parent.

This allows external monitoring applications to watch the daemon without having to add sleep calls to wait for the pid file be written on a busy system.

The wait is implemented using the example from man 2 pipe.

Signed-off-by: Alexander Kanavin <alex@linutronix.de>
---
 daemon.c | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)

diff --git a/daemon.c b/daemon.c
index 9828718..6a21554 100644
--- a/daemon.c
+++ b/daemon.c
@@ -889,6 +889,8 @@ int main(int argc, char **argv)
 #endif				       /* WIN32 */
     int res;
 
+    int pipefd[2];
+
     /* flush stdout after each newline */
     setvbuf(stdout, NULL, _IOLBF, 0);
 
@@ -954,11 +956,24 @@ int main(int argc, char **argv)
 
 #ifndef WIN32
     if (opt_detach) {
+        if (pipe(pipefd) == -1) {
+            fprintf(stderr, "could not create a pipe\n");
+            exit(1);
+        }
+
 	pid = fork();
 	if (pid == -1) {
 	    fprintf(stderr, "could not fork into background\n");
 	    daemon_exit(0);
 	}
+        if (pid > 0) {
+            char buf;
+            close(pipefd[1]);
+            while (read(pipefd[0], &buf, 1) > 0) {
+                // do nothing until pipe closes
+            }
+            close(pipefd[0]);
+        }
     }
 #endif				       /* WIN32 */
 
@@ -1007,6 +1022,12 @@ int main(int argc, char **argv)
 	get_squash_ids();
 	exports_parse();
 
+	if (opt_detach) {
+           close(pipefd[0]);
+           write(pipefd[1], "1", 1);
+           close(pipefd[1]);
+        }
+
 	unfs3_svc_run();
 	exit(1);
 	/* NOTREACHED */
-- 
2.42.0

