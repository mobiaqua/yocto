From e5975bd6bfa7667c303ccad04aa279289064c9ab Mon Sep 17 00:00:00 2001
From: Robert Nelson <robertcnelson@gmail.com>
Date: Fri, 21 Oct 2022 17:25:10 -0500
Subject: [PATCH 03/15] board_detect.c: mainline fixes

Signed-off-by: Robert Nelson <robertcnelson@gmail.com>
---
 board/ti/common/board_detect.c | 53 ++++++++++++++++------------------
 1 file changed, 25 insertions(+), 28 deletions(-)

diff --git a/board/ti/common/board_detect.c b/board/ti/common/board_detect.c
index 58e7e6a764..94314e5de6 100644
--- a/board/ti/common/board_detect.c
+++ b/board/ti/common/board_detect.c
@@ -86,7 +86,6 @@ __weak void gpi2c_init(void)
 static int __maybe_unused ti_i2c_eeprom_get(int bus_addr, int dev_addr,
 					    u32 header, u32 size, uint8_t *ep)
 {
-	u32 hdr_read = 0xdeadbeef;
 	int rc;
 
 #if defined(CONFIG_DM_I2C)
@@ -103,38 +102,34 @@ static int __maybe_unused ti_i2c_eeprom_get(int bus_addr, int dev_addr,
 	/*
 	 * Read the header first then only read the other contents.
 	 */
-	rc = i2c_set_chip_offset_len(dev, 2);
+	rc = i2c_set_chip_offset_len(dev, 1);
 	if (rc)
 		return rc;
 
 	/*
 	 * Skip checking result here since this could be a valid i2c read fail
-	 * on some boards that use 1 byte addressing.
-	 * We must allow for fall through to check the data if 1 byte
+	 * on some boards that use 2 byte addressing.
+	 * We must allow for fall through to check the data if 2 byte
 	 * addressing works
 	 */
-	(void)dm_i2c_read(dev, 0, (uint8_t *)&hdr_read, 4);
+	(void)dm_i2c_read(dev, 0, ep, size);
 
 	/* Corrupted data??? */
-	if (hdr_read != header) {
+	if (*((u32 *)ep) != header) {
 		/*
 		 * read the eeprom header using i2c again, but use only a
-		 * 1 byte address (some legacy boards need this..)
+		 * 2 byte address (some newer boards need this..)
 		 */
-		rc = i2c_set_chip_offset_len(dev, 1);
+		rc = i2c_set_chip_offset_len(dev, 2);
 		if (rc)
 			return rc;
 
-		rc = dm_i2c_read(dev, 0, (uint8_t *)&hdr_read, 4);
+		rc = dm_i2c_read(dev, 0, ep, size);
 		if (rc)
 			return rc;
 	}
-	if (hdr_read != header)
+	if (*((u32 *)ep) != header)
 		return -1;
-
-	rc = dm_i2c_read(dev, 0, ep, size);
-	if (rc)
-		return rc;
 #else
 	u32 byte;
 
@@ -146,34 +141,29 @@ static int __maybe_unused ti_i2c_eeprom_get(int bus_addr, int dev_addr,
 	/*
 	 * Read the header first then only read the other contents.
 	 */
-	byte = 2;
+	byte = 1;
 
 	/*
 	 * Skip checking result here since this could be a valid i2c read fail
-	 * on some boards that use 1 byte addressing.
-	 * We must allow for fall through to check the data if 1 byte
+	 * on some boards that use 2 byte addressing.
+	 * We must allow for fall through to check the data if 2 byte
 	 * addressing works
 	 */
-	(void)i2c_read(dev_addr, 0x0, byte, (uint8_t *)&hdr_read, 4);
+	(void)i2c_read(dev_addr, 0x0, byte, ep, size);
 
 	/* Corrupted data??? */
-	if (hdr_read != header) {
+	if (*((u32 *)ep) != header) {
 		/*
 		 * read the eeprom header using i2c again, but use only a
-		 * 1 byte address (some legacy boards need this..)
+		 * 2 byte address (some newer boards need this..)
 		 */
-		byte = 1;
-		rc = i2c_read(dev_addr, 0x0, byte, (uint8_t *)&hdr_read,
-			      4);
+		byte = 2;
+		rc = i2c_read(dev_addr, 0x0, byte, ep, size);
 		if (rc)
 			return rc;
 	}
-	if (hdr_read != header)
+	if (*((u32 *)ep) != header)
 		return -1;
-
-	rc = i2c_read(dev_addr, 0x0, byte, ep, size);
-	if (rc)
-		return rc;
 #endif
 	return 0;
 }
@@ -448,6 +438,12 @@ int __maybe_unused ti_i2c_eeprom_am6_get(int bus_addr, int dev_addr,
 	memset(ep, 0, sizeof(*ep));
 	ep->header = TI_DEAD_EEPROM_MAGIC;
 
+	/* Read the board ID record which is always the first EEPROM record */
+	rc = ti_i2c_eeprom_get(bus_addr, dev_addr, TI_EEPROM_HEADER_MAGIC,
+			       sizeof(board_id), (uint8_t *)&board_id);
+	if (rc)
+		return rc;
+
 	/* Read the board ID record which is always the first EEPROM record */
 	rc = ti_i2c_eeprom_get(bus_addr, dev_addr, TI_EEPROM_HEADER_MAGIC,
 			       sizeof(board_id), (uint8_t *)&board_id);
@@ -523,6 +519,7 @@ int __maybe_unused ti_i2c_eeprom_am6_get(int bus_addr, int dev_addr,
 			 */
 			pr_err("%s: Ignoring record id %u\n", __func__,
 			       record.header.id);
+
 			consecutive_bad_records++;
 		}
 
-- 
2.43.0

