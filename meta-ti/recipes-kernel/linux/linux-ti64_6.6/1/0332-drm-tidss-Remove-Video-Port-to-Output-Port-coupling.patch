From 52c825e91dca141ac3c279021ff29dcbbc928195 Mon Sep 17 00:00:00 2001
From: Aradhya Bhatia <a-bhatia1@ti.com>
Date: Fri, 21 Apr 2023 12:07:52 +0530
Subject: [PATCH 332/508] drm/tidss: Remove Video Port to Output Port coupling

Make DSS Video Ports agnostic of output bus types.

DSS controllers have had a 1-to-1 coupling between its VPs and its
output ports. This no longer stands true for the new AM625 DSS. The
AM625 DSS has 2 VPs but requires 3 output ports to support its Dual-Link
OLDI output coming from the first VP and DPI video outputs coming from
the other.

This coupling, hence, has been removed by renaming the 'vp_bus_type' to
'output_type' because the VPs are essentially agnostic of the output
type and it is the output ports which have a bus type.

Signed-off-by: Aradhya Bhatia <a-bhatia1@ti.com>
Reviewed-by: Devarsh Thakkar <devarsht@ti.com>
---
 drivers/gpu/drm/tidss/tidss_dispc.c | 73 ++++++++++++++++++++---------
 drivers/gpu/drm/tidss/tidss_dispc.h | 24 ++++++----
 drivers/gpu/drm/tidss/tidss_drv.h   | 10 +++-
 drivers/gpu/drm/tidss/tidss_irq.h   |  2 +-
 drivers/gpu/drm/tidss/tidss_kms.c   | 14 +++---
 5 files changed, 81 insertions(+), 42 deletions(-)

diff --git a/drivers/gpu/drm/tidss/tidss_dispc.c b/drivers/gpu/drm/tidss/tidss_dispc.c
index a869172a7f60..73bddd36095d 100644
--- a/drivers/gpu/drm/tidss/tidss_dispc.c
+++ b/drivers/gpu/drm/tidss/tidss_dispc.c
@@ -61,7 +61,7 @@ const struct dispc_features dispc_k2g_feats = {
 	.min_pclk_khz = 4375,
 
 	.max_pclk_khz = {
-		[DISPC_VP_DPI] = 150000,
+		[DISPC_OUTPUT_DPI] = 150000,
 	},
 
 	/*
@@ -96,7 +96,6 @@ const struct dispc_features dispc_k2g_feats = {
 	.vp_name = { "vp1" },
 	.ovr_name = { "ovr1" },
 	.vpclk_name =  { "vp1" },
-	.vp_bus_type = { DISPC_VP_DPI },
 
 	.vp_feat = { .color = {
 			.has_ctm = true,
@@ -109,6 +108,10 @@ const struct dispc_features dispc_k2g_feats = {
 	.vid_name = { "vid1" },
 	.vid_lite = { false },
 	.vid_order = { 0 },
+
+	.num_outputs = 1,
+	.output_type = { DISPC_OUTPUT_DPI, },
+	.output_source_vp = { 0, },
 };
 
 static const u16 tidss_am65x_common_regs[DISPC_COMMON_REG_TABLE_LEN] = {
@@ -140,8 +143,8 @@ static const u16 tidss_am65x_common_regs[DISPC_COMMON_REG_TABLE_LEN] = {
 
 const struct dispc_features dispc_am65x_feats = {
 	.max_pclk_khz = {
-		[DISPC_VP_DPI] = 165000,
-		[DISPC_VP_OLDI] = 165000,
+		[DISPC_OUTPUT_DPI] = 165000,
+		[DISPC_OUTPUT_OLDI] = 165000,
 	},
 
 	.scaling = {
@@ -171,7 +174,6 @@ const struct dispc_features dispc_am65x_feats = {
 	.vp_name = { "vp1", "vp2" },
 	.ovr_name = { "ovr1", "ovr2" },
 	.vpclk_name =  { "vp1", "vp2" },
-	.vp_bus_type = { DISPC_VP_OLDI, DISPC_VP_DPI },
 
 	.vp_feat = { .color = {
 			.has_ctm = true,
@@ -185,6 +187,10 @@ const struct dispc_features dispc_am65x_feats = {
 	.vid_name = { "vid", "vidl1" },
 	.vid_lite = { false, true, },
 	.vid_order = { 1, 0 },
+
+	.num_outputs = 2,
+	.output_type = { DISPC_OUTPUT_OLDI, DISPC_OUTPUT_DPI, },
+	.output_source_vp = { 0, 1, },
 };
 
 static const u16 tidss_j721e_common_regs[DISPC_COMMON_REG_TABLE_LEN] = {
@@ -229,8 +235,8 @@ static const u16 tidss_j721e_common_regs[DISPC_COMMON_REG_TABLE_LEN] = {
 
 const struct dispc_features dispc_j721e_feats = {
 	.max_pclk_khz = {
-		[DISPC_VP_DPI] = 170000,
-		[DISPC_VP_INTERNAL] = 600000,
+		[DISPC_OUTPUT_DPI] = 170000,
+		[DISPC_OUTPUT_INTERNAL] = 600000,
 	},
 
 	.scaling = {
@@ -260,9 +266,6 @@ const struct dispc_features dispc_j721e_feats = {
 	.vp_name = { "vp1", "vp2", "vp3", "vp4" },
 	.ovr_name = { "ovr1", "ovr2", "ovr3", "ovr4" },
 	.vpclk_name = { "vp1", "vp2", "vp3", "vp4" },
-	/* Currently hard coded VP routing (see dispc_initial_config()) */
-	.vp_bus_type =	{ DISPC_VP_INTERNAL, DISPC_VP_DPI,
-			  DISPC_VP_INTERNAL, DISPC_VP_DPI, },
 	.vp_feat = { .color = {
 			.has_ctm = true,
 			.gamma_size = 1024,
@@ -273,6 +276,12 @@ const struct dispc_features dispc_j721e_feats = {
 	.vid_name = { "vid1", "vidl1", "vid2", "vidl2" },
 	.vid_lite = { 0, 1, 0, 1, },
 	.vid_order = { 1, 3, 0, 2 },
+
+	.num_outputs = 4,
+	/* Currently hard coded VP routing (see dispc_initial_config()) */
+	.output_type = { DISPC_OUTPUT_INTERNAL, DISPC_OUTPUT_DPI,
+			 DISPC_OUTPUT_INTERNAL, DISPC_OUTPUT_DPI, },
+	.output_source_vp = { 0, 1, 2, 3, },
 };
 
 static const u16 *dispc_common_regmap;
@@ -287,12 +296,12 @@ struct dispc_device {
 
 	void __iomem *base_common;
 	void __iomem *base_vid[TIDSS_MAX_PLANES];
-	void __iomem *base_ovr[TIDSS_MAX_PORTS];
-	void __iomem *base_vp[TIDSS_MAX_PORTS];
+	void __iomem *base_ovr[TIDSS_MAX_VPS];
+	void __iomem *base_vp[TIDSS_MAX_VPS];
 
 	struct regmap *oldi_io_ctrl;
 
-	struct clk *vp_clk[TIDSS_MAX_PORTS];
+	struct clk *vp_clk[TIDSS_MAX_VPS];
 
 	const struct dispc_features *feat;
 
@@ -300,7 +309,7 @@ struct dispc_device {
 
 	bool is_enabled;
 
-	struct dss_vp_data vp_data[TIDSS_MAX_PORTS];
+	struct dss_vp_data vp_data[TIDSS_MAX_VPS];
 
 	u32 *fourccs;
 	u32 num_fourccs;
@@ -355,8 +355,8 @@ const struct dispc_features dispc_am625_feats = {
 
 const struct dispc_features dispc_am625_feats = {
 	.max_pclk_khz = {
-		[DISPC_VP_DPI] = 165000,
-		[DISPC_VP_INTERNAL] = 170000,
+		[DISPC_OUTPUT_DPI] = 165000,
+		[DISPC_OUTPUT_INTERNAL] = 170000,
 	},
 
 	.scaling = {
@@ -386,7 +386,7 @@ const struct dispc_features dispc_am625_feats = {
 	.vp_name = { "vp1", "vp2" },
 	.ovr_name = { "ovr1", "ovr2" },
 	.vpclk_name =  { "vp1", "vp2" },
-	.vp_bus_type = { DISPC_VP_INTERNAL, DISPC_VP_DPI },
+	.output_type = { DISPC_OUTPUT_INTERNAL, DISPC_OUTPUT_DPI },
 
 	.vp_feat = { .color = {
 			.has_ctm = true,
@@ -444,6 +453,18 @@ static void OVR_REG_FLD_MOD(struct dispc_device *dispc, u32 ovr, u32 idx,
 				val, start, end));
 }
 
+enum dispc_output_type dispc_get_output_type(struct dispc_device *dispc,
+					     u32 vp_idx)
+{
+	u32 i;
+
+	for (i = 0; i < dispc->feat->num_outputs; i++)
+		if (dispc->feat->output_source_vp[i] == vp_idx)
+			return dispc->feat->output_type[i];
+
+	return DISPC_OUTPUT_DPI;
+}
+
 static dispc_irq_t dispc_vp_irq_from_raw(u32 stat, u32 vp_idx)
 {
 	dispc_irq_t vp_stat = 0;
@@ -842,6 +863,7 @@ int dispc_vp_bus_check(struct dispc_device *dispc, u32 vp_idx,
 {
 	const struct tidss_crtc_state *tstate = to_tidss_crtc_state(state);
 	const struct dispc_bus_format *fmt;
+	enum dispc_output_type output_type;
 
 	fmt = dispc_vp_find_bus_fmt(dispc, vp_idx, tstate->bus_format,
 				    tstate->bus_flags);
@@ -851,8 +873,8 @@ int dispc_vp_bus_check(struct dispc_device *dispc, u32 vp_idx,
 		return -EINVAL;
 	}
 
-	if (dispc->feat->vp_bus_type[vp_idx] != DISPC_VP_OLDI &&
-	    fmt->is_oldi_fmt) {
+	output_type = dispc_get_output_type(dispc, vp_idx);
+	if (output_type != DISPC_OUTPUT_OLDI && fmt->is_oldi_fmt) {
 		dev_dbg(dispc->dev, "%s: %s is not OLDI-port\n",
 			__func__, dispc->feat->vp_name[vp_idx]);
 		return -EINVAL;
@@ -948,6 +970,7 @@ void dispc_vp_prepare(struct dispc_device *dispc, u32 vp_idx,
 {
 	const struct tidss_crtc_state *tstate = to_tidss_crtc_state(state);
 	const struct dispc_bus_format *fmt;
+	enum dispc_output_type output_type;
 
 	fmt = dispc_vp_find_bus_fmt(dispc, vp_idx, tstate->bus_format,
 				    tstate->bus_flags);
@@ -955,7 +978,8 @@ void dispc_vp_prepare(struct dispc_device *dispc, u32 vp_idx,
 	if (WARN_ON(!fmt))
 		return;
 
-	if (dispc->feat->vp_bus_type[vp_idx] == DISPC_VP_OLDI) {
+	output_type = dispc_get_output_type(dispc, vp_idx);
+	if (output_type == DISPC_OUTPUT_OLDI) {
 		dispc_oldi_tx_power(dispc, true);
 
 		dispc_enable_oldi(dispc, vp_idx, fmt);
@@ -970,6 +994,7 @@ void dispc_vp_enable(struct dispc_device *dispc, u32 vp_idx,
 	bool align, onoff, rf, ieo, ipc, ihs, ivs;
 	const struct dispc_bus_format *fmt;
 	u32 hsw, hfp, hbp, vsw, vfp, vbp;
+	enum dispc_output_type output_type;
 
 	fmt = dispc_vp_find_bus_fmt(dispc, vp_idx, tstate->bus_format,
 				    tstate->bus_flags);
@@ -1014,7 +1039,8 @@ void dispc_vp_enable(struct dispc_device *dispc, u32 vp_idx,
 	align = true;
 
 	/* always use DE_HIGH for OLDI */
-	if (dispc->feat->vp_bus_type[vp_idx] == DISPC_VP_OLDI)
+	output_type = dispc_get_output_type(dispc, vp_idx);
+	if (output_type == DISPC_OUTPUT_OLDI)
 		ieo = false;
 
 	dispc_vp_write(dispc, vp_idx, DISPC_VP_POL_FREQ,
@@ -1040,7 +1066,10 @@ void dispc_vp_disable(struct dispc_device *dispc, u32 vp_idx)
 
 void dispc_vp_unprepare(struct dispc_device *dispc, u32 vp_idx)
 {
-	if (dispc->feat->vp_bus_type[vp_idx] == DISPC_VP_OLDI) {
+	enum dispc_output_type output_type;
+
+	output_type = dispc_get_output_type(dispc, vp_idx);
+	if (output_type == DISPC_OUTPUT_OLDI) {
 		dispc_vp_write(dispc, vp_idx, DISPC_VP_DSS_OLDI_CFG, 0);
 
 		dispc_oldi_tx_power(dispc, false);
@@ -1115,12 +1144,12 @@ enum drm_mode_status dispc_vp_mode_valid(struct dispc_device *dispc, u32 vp_idx,
 					 const struct drm_display_mode *mode)
 {
 	u32 hsw, hfp, hbp, vsw, vfp, vbp;
-	enum dispc_vp_bus_type bus_type;
+	enum dispc_output_type output_type;
 	int max_pclk;
 
-	bus_type = dispc->feat->vp_bus_type[vp_idx];
+	output_type = dispc_get_output_type(dispc, vp_idx);
 
-	max_pclk = dispc->feat->max_pclk_khz[bus_type];
+	max_pclk = dispc->feat->max_pclk_khz[output_type];
 
 	if (WARN_ON(max_pclk == 0))
 		return MODE_BAD;
diff --git a/drivers/gpu/drm/tidss/tidss_dispc.h b/drivers/gpu/drm/tidss/tidss_dispc.h
index c7e3d1a4f49d..8409ce414d72 100644
--- a/drivers/gpu/drm/tidss/tidss_dispc.h
+++ b/drivers/gpu/drm/tidss/tidss_dispc.h
@@ -50,11 +50,11 @@ struct dispc_errata {
 	bool i2000; /* DSS Does Not Support YUV Pixel Data Formats */
 };
 
-enum dispc_vp_bus_type {
-	DISPC_VP_DPI,		/* DPI output */
-	DISPC_VP_OLDI,		/* OLDI (LVDS) output */
-	DISPC_VP_INTERNAL,	/* SoC internal routing */
-	DISPC_VP_MAX_BUS_TYPE,
+enum dispc_output_type {
+	DISPC_OUTPUT_DPI,		/* DPI output */
+	DISPC_OUTPUT_OLDI,		/* OLDI (LVDS) output */
+	DISPC_OUTPUT_INTERNAL,		/* SoC internal routing */
+	DISPC_OUTPUT_TYPES_MAX,
 };
 
 enum dispc_dss_subrevision {
@@ -65,7 +65,7 @@ enum dispc_dss_subrevision {
 
 struct dispc_features {
 	int min_pclk_khz;
-	int max_pclk_khz[DISPC_VP_MAX_BUS_TYPE];
+	int max_pclk_khz[DISPC_OUTPUT_TYPES_MAX];
 
 	struct dispc_features_scaling scaling;
 
@@ -74,22 +74,26 @@ struct dispc_features {
 	const char *common;
 	const u16 *common_regs;
 	u32 num_vps;
-	const char *vp_name[TIDSS_MAX_PORTS]; /* Should match dt reg names */
-	const char *ovr_name[TIDSS_MAX_PORTS]; /* Should match dt reg names */
-	const char *vpclk_name[TIDSS_MAX_PORTS]; /* Should match dt clk names */
-	const enum dispc_vp_bus_type vp_bus_type[TIDSS_MAX_PORTS];
+	const char *vp_name[TIDSS_MAX_VPS]; /* Should match dt reg names */
+	const char *ovr_name[TIDSS_MAX_VPS]; /* Should match dt reg names */
+	const char *vpclk_name[TIDSS_MAX_VPS]; /* Should match dt clk names */
 	struct tidss_vp_feat vp_feat;
 	u32 num_planes;
 	const char *vid_name[TIDSS_MAX_PLANES]; /* Should match dt reg names */
 	bool vid_lite[TIDSS_MAX_PLANES];
 	u32 vid_order[TIDSS_MAX_PLANES];
+	u32 num_outputs;
+	const enum dispc_output_type output_type[TIDSS_MAX_OUTPUTS];
+	u32 output_source_vp[TIDSS_MAX_OUTPUTS];
 };
 
 extern const struct dispc_features dispc_k2g_feats;
 extern const struct dispc_features dispc_am625_feats;
 extern const struct dispc_features dispc_am65x_feats;
 extern const struct dispc_features dispc_j721e_feats;
 
+enum dispc_output_type dispc_get_output_type(struct dispc_device *dispc,
+					     u32 vp_idx);
 void dispc_set_irqenable(struct dispc_device *dispc, dispc_irq_t mask);
 dispc_irq_t dispc_read_and_clear_irqstatus(struct dispc_device *dispc);
 
diff --git a/drivers/gpu/drm/tidss/tidss_drv.h b/drivers/gpu/drm/tidss/tidss_drv.h
index d7f27b0b0315..de897e45ff07 100644
--- a/drivers/gpu/drm/tidss/tidss_drv.h
+++ b/drivers/gpu/drm/tidss/tidss_drv.h
@@ -9,9 +9,15 @@
 
 #include <linux/spinlock.h>
 
-#define TIDSS_MAX_PORTS 4
+#define TIDSS_MAX_VPS 4
 #define TIDSS_MAX_PLANES 4
 
+/*
+ * This is not dependent on the number of VPs.
+ * For example, some SoCs have 2 VPs but 3 outputs coming out.
+ */
+#define TIDSS_MAX_OUTPUTS 4
+
 typedef u32 dispc_irq_t;
 
 struct tidss_device {
@@ -22,7 +28,7 @@ struct tidss_device {
 	struct dispc_device *dispc;
 
 	unsigned int num_crtcs;
-	struct drm_crtc *crtcs[TIDSS_MAX_PORTS];
+	struct drm_crtc *crtcs[TIDSS_MAX_VPS];
 
 	unsigned int num_planes;
 	struct drm_plane *planes[TIDSS_MAX_PLANES];
diff --git a/drivers/gpu/drm/tidss/tidss_irq.h b/drivers/gpu/drm/tidss/tidss_irq.h
index b512614d5863..a753f5e3ce15 100644
--- a/drivers/gpu/drm/tidss/tidss_irq.h
+++ b/drivers/gpu/drm/tidss/tidss_irq.h
@@ -35,7 +35,7 @@
 
 #define DSS_IRQ_VP_BIT_N(ch, bit)	(4 + 4 * (ch) + (bit))
 #define DSS_IRQ_PLANE_BIT_N(plane, bit) \
-	(DSS_IRQ_VP_BIT_N(TIDSS_MAX_PORTS, 0) + 1 * (plane) + (bit))
+	(DSS_IRQ_VP_BIT_N(TIDSS_MAX_VPS, 0) + 1 * (plane) + (bit))
 
 #define DSS_IRQ_VP_BIT(ch, bit)	BIT(DSS_IRQ_VP_BIT_N((ch), (bit)))
 #define DSS_IRQ_PLANE_BIT(plane, bit) \
diff --git a/drivers/gpu/drm/tidss/tidss_kms.c b/drivers/gpu/drm/tidss/tidss_kms.c
index 132d54c9d9ec..28c502d74f40 100644
--- a/drivers/gpu/drm/tidss/tidss_kms.c
+++ b/drivers/gpu/drm/tidss/tidss_kms.c
@@ -120,16 +120,16 @@ static int tidss_dispc_modeset_init(struct tidss_device *tidss)
 	};
 
 	const struct dispc_features *feat = tidss->feat;
-	u32 max_vps = feat->num_vps;
+	u32 num_outputs = feat->num_outputs;
 	u32 max_planes = feat->num_planes;
 
-	struct pipe pipes[TIDSS_MAX_PORTS];
+	struct pipe pipes[TIDSS_MAX_VPS];
 	u32 num_pipes = 0;
 	u32 crtc_mask;
 
 	/* first find all the connected panels & bridges */
 
-	for (i = 0; i < max_vps; i++) {
+	for (i = 0; i < num_outputs; i++) {
 		struct drm_panel *panel;
 		struct drm_bridge *bridge;
 		u32 enc_type = DRM_MODE_ENCODER_NONE;
@@ -150,12 +150,12 @@ static int tidss_dispc_modeset_init(struct tidss_device *tidss)
 
 			dev_dbg(dev, "Setting up panel for port %d\n", i);
 
-			switch (feat->vp_bus_type[i]) {
-			case DISPC_VP_OLDI:
+			switch (feat->output_type[i]) {
+			case DISPC_OUTPUT_OLDI:
 				enc_type = DRM_MODE_ENCODER_LVDS;
 				conn_type = DRM_MODE_CONNECTOR_LVDS;
 				break;
-			case DISPC_VP_DPI:
+			case DISPC_OUTPUT_DPI:
 				enc_type = DRM_MODE_ENCODER_DPI;
 				conn_type = DRM_MODE_CONNECTOR_DPI;
 				break;
@@ -181,7 +181,7 @@ static int tidss_dispc_modeset_init(struct tidss_device *tidss)
 			}
 		}
 
-		pipes[num_pipes].vp_idx = i;
+		pipes[num_pipes].vp_idx = feat->output_source_vp[i];
 		pipes[num_pipes].bridge = bridge;
 		pipes[num_pipes].enc_type = enc_type;
 		num_pipes++;
