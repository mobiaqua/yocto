diff --git a/drivers/base/firmware_loader/main.c b/drivers/base/firmware_loader/main.c
index b58c42f1b..60a0a78d4 100644
--- a/drivers/base/firmware_loader/main.c
+++ b/drivers/base/firmware_loader/main.c
@@ -510,6 +510,7 @@ fw_get_filesystem_firmware(struct device *device, struct fw_priv *fw_priv,
 		return -ENOMEM;
 
 	wait_for_initramfs();
+	wait_for_rootfs();
 	for (i = 0; i < ARRAY_SIZE(fw_path); i++) {
 		size_t file_size = 0;
 		size_t *file_size_ptr = NULL;
diff --git a/include/linux/init.h b/include/linux/init.h
index 266c3e164..5697f4b7f 100644
--- a/include/linux/init.h
+++ b/include/linux/init.h
@@ -170,6 +170,7 @@ extern initcall_entry_t __initcall7_start[];
 extern initcall_entry_t __initcall_end[];
 
 extern struct file_system_type rootfs_fs_type;
+void wait_for_rootfs(void);
 
 #if defined(CONFIG_STRICT_KERNEL_RWX) || defined(CONFIG_STRICT_MODULE_RWX)
 extern bool rodata_enabled;
diff --git a/init/main.c b/init/main.c
index e24b0780f..1fbd532ea 100644
--- a/init/main.c
+++ b/init/main.c
@@ -1519,6 +1519,25 @@ void __init console_on_rootfs(void)
 	fput(file);
 }
 
+static DECLARE_WAIT_QUEUE_HEAD(rootfs_waitq);
+static bool rootfs_mounted;
+
+void wait_for_rootfs(void)
+{
+	/* Avoid waiting for ourselves */
+	if (rootfs_mounted || WARN_ON(is_global_init(current)))
+		return;
+
+	wait_event(rootfs_waitq, rootfs_mounted);
+}
+EXPORT_SYMBOL(wait_for_rootfs);
+
+static inline void wake_up_rootfs_waiters(void)
+{
+	rootfs_mounted = true;
+	wake_up_all(&rootfs_waitq);
+}
+
 static noinline void __init kernel_init_freeable(void)
 {
 	/* Now the scheduler is fully set up and can do blocking allocations */
@@ -1573,5 +1592,7 @@ static noinline void __init kernel_init_freeable(void)
 	 * and default modules
 	 */
 
+	wake_up_rootfs_waiters();
+
 	integrity_load_keys();
 }
