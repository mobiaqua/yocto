From 907f1dea63acf317255922017b0e068b0110393b Mon Sep 17 00:00:00 2001
From: Jai Luthra <j-luthra@ti.com>
Date: Thu, 5 Oct 2023 16:21:10 +0530
Subject: [PATCH 031/322] media: ti: j721e-csi2rx: Fix broken UYVY format
 ordering

There was an incorrect assumption in the driver that we need to set a
different YUV422_MODE in SHIM hardware to support different incoming
UYVY/YUYV/.. variants.

The hardware in-fact assumes incoming data is UYVY following MIPI CSI
spec, and the YUV422_MODE is available in case we want to swap the bytes
around before storing in memory.

Given some sensors (like OV5640) can send both UYVY and YUYV data, and
we don't have a requirement of swapping them to something else, we
should simply "passthrough" the incoming packed format by using MODE_11.

Reported-by: Mattijs Korpershoek <mkorpershoek@baylibre.com>
Fixes: 70f7e7ba6c66 ("media: ti: Add CSI2RX support for J721E")
Signed-off-by: Jai Luthra <j-luthra@ti.com>
---
 .../platform/ti/j721e-csi2rx/j721e-csi2rx.c   | 36 +++++++++----------
 1 file changed, 18 insertions(+), 18 deletions(-)

diff --git a/drivers/media/platform/ti/j721e-csi2rx/j721e-csi2rx.c b/drivers/media/platform/ti/j721e-csi2rx/j721e-csi2rx.c
index 2fb18fe5d6be..1a8369728667 100644
--- a/drivers/media/platform/ti/j721e-csi2rx/j721e-csi2rx.c
+++ b/drivers/media/platform/ti/j721e-csi2rx/j721e-csi2rx.c
@@ -31,10 +31,7 @@
 #define SHIM_DMACNTX_SIZE		GENMASK(21, 20)
 #define SHIM_DMACNTX_VC			GENMASK(9, 6)
 #define SHIM_DMACNTX_FMT		GENMASK(5, 0)
-#define SHIM_DMACNTX_UYVY		0
-#define SHIM_DMACNTX_VYUY		1
-#define SHIM_DMACNTX_YUYV		2
-#define SHIM_DMACNTX_YVYU		3
+#define SHIM_DMACNTX_YUV422_MODE_11	3
 #define SHIM_DMACNTX_SIZE_8		0
 #define SHIM_DMACNTX_SIZE_16		1
 #define SHIM_DMACNTX_SIZE_32		2
@@ -600,27 +597,30 @@ static void ti_csi2rx_setup_shim(struct ti_csi2rx_ctx *ctx)
 	reg |= FIELD_PREP(SHIM_DMACNTX_FMT, fmt->csi_dt);
 
 	/*
-	 * Using the values from the documentation gives incorrect ordering for
-	 * the luma and chroma components. In practice, the "reverse" format
-	 * gives the correct image. So for example, if the image is in UYVY, the
-	 * reverse would be YVYU.
+	 * The hardware assumes incoming YUV422 8-bit data on MIPI CSI2 bus
+	 * follows the spec and is packed in the order U0 -> Y0 -> V0 -> Y1 ->
+	 * ...
+	 *
+	 * There is an option to swap the bytes around before storing in
+	 * memory, to achieve different pixel formats:
+	 *
+	 * Byte3 ------------ Byte0
+	 * [ Y1 ][ V0 ][ Y0 ][ U0 ]	MODE 11
+	 * [ Y1 ][ U0 ][ Y0 ][ V0 ]	MODE 10
+	 * [ V0 ][ Y1 ][ U0 ][ Y0 ]	MODE 01
+	 * [ Y1 ][ V0 ][ Y0 ][ U0 ]	MODE 00
+	 *
+	 * We don't have any requirement to change pixelformat from what is
+	 * coming from the source, so we keep it in MODE 11, which does not
+	 * swap any bytes when storing in memory.
 	 */
 	switch (fmt->fourcc) {
 	case V4L2_PIX_FMT_UYVY:
-		reg |= FIELD_PREP(SHIM_DMACNTX_YUV422,
-					SHIM_DMACNTX_YVYU);
-		break;
 	case V4L2_PIX_FMT_VYUY:
-		reg |= FIELD_PREP(SHIM_DMACNTX_YUV422,
-					SHIM_DMACNTX_YUYV);
-		break;
 	case V4L2_PIX_FMT_YUYV:
-		reg |= FIELD_PREP(SHIM_DMACNTX_YUV422,
-					SHIM_DMACNTX_VYUY);
-		break;
 	case V4L2_PIX_FMT_YVYU:
 		reg |= FIELD_PREP(SHIM_DMACNTX_YUV422,
-					SHIM_DMACNTX_UYVY);
+					SHIM_DMACNTX_YUV422_MODE_11);
 		break;
 	default:
 		/* Ignore if not YUV 4:2:2 */
-- 
2.43.0

