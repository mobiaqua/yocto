From 7348e7c98d2efc1d0fcb28edd841f53aa7fd59be Mon Sep 17 00:00:00 2001
From: Darren Etheridge <detheridge@ti.com>
Date: Sun, 16 Jun 2024 21:45:30 -0500
Subject: [PATCH 185/222] media: platform: img: vxd: fix the error handling

fatal errors were not being treated differently to frame errors, so if
there were any decode errors or stream errors the stream was just aborted.

This patch fixes this issue by dividing into error categories, in the case
of fatal errors the stream gets terminated as it previously did.  However
in the case of recoverable errors we just signal back to v4l2 that a frame
was corrupted, but still go ahead and pass the picture data back without
tearing down the stream.  This allows the driver to do any error concealment
on the decoded picture, but still indicate to v4l2 that the frame contains errors.

Signed-off-by: Darren Etheridge <detheridge@ti.com>
Acked-by: Brandon Brnich <b-brnich@ti.com>
Signed-off-by: Vignesh Raghavendra <vigneshr@ti.com>
Signed-off-by: Brandon Brnich <b-brnich@ti.com>
---
 .../media/platform/imagination/vxe-vxd/decoder/core.c  | 15 ++++++++-------
 .../platform/imagination/vxe-vxd/decoder/decoder.c     | 12 +++++++++++-
 .../platform/imagination/vxe-vxd/decoder/vxd_dec.h     |  3 ++-
 .../platform/imagination/vxe-vxd/decoder/vxd_v4l2.c    | 18 ++++++++++++++----
 4 files changed, 35 insertions(+), 13 deletions(-)

diff --git a/drivers/media/platform/imagination/vxe-vxd/decoder/core.c b/drivers/media/platform/imagination/vxe-vxd/decoder/core.c
index e6887ee93abc..7d812ccbb668 100644
--- a/drivers/media/platform/imagination/vxe-vxd/decoder/core.c
+++ b/drivers/media/platform/imagination/vxe-vxd/decoder/core.c
@@ -788,7 +788,7 @@ static int core_handle_processed_unit(struct core_stream_context *c_str_ctx,
 
 				g_ctx->vxd_str_processed_cb(c_str_ctx->vxd_dec_context,
 					VXD_CB_STRUNIT_PROCESSED,
-					bstr_seg->bufmap_id);
+					bstr_seg->bufmap_id, 0);
 			}
 			/* Get next segment. */
 			bstr_seg = (struct bspp_bitstr_seg *)
@@ -798,7 +798,7 @@ static int core_handle_processed_unit(struct core_stream_context *c_str_ctx,
 
 	case VDECDD_STRUNIT_PICTURE_END:
 		g_ctx->vxd_str_processed_cb(c_str_ctx->vxd_dec_context,
-			VXD_CB_PICT_END, 0xFFFF);
+			VXD_CB_PICT_END, 0xFFFF, 0);
 		break;
 
 	case VDECDD_STRUNIT_STOP:
@@ -837,7 +837,8 @@ core_handle_decoded_picture(struct core_stream_context *core_str_ctx,
 		return IMG_ERROR_COULD_NOT_OBTAIN_RESOURCE;
 
 	global_core_ctx->vxd_str_processed_cb(core_str_ctx->vxd_dec_context,
-		(enum vxd_cb_type)type, pictbuf_mapinfo->buf_map_id);
+		(enum vxd_cb_type)type, pictbuf_mapinfo->buf_map_id,
+		picture->dec_pict_info->err_flags);
 	return IMG_SUCCESS;
 }
 
@@ -888,21 +889,21 @@ static int core_stream_processed_cb(void *handle, int cb_type, void *cb_item)
 
 	case VXD_CB_STR_END:
 		global_core_ctx->vxd_str_processed_cb(core_str_ctx->vxd_dec_context,
-			(enum vxd_cb_type)cb_type, 0);
+			(enum vxd_cb_type)cb_type, 0, 0);
 		ret = IMG_SUCCESS;
 
 		break;
-
 	case VXD_CB_ERROR_FATAL:
 		/*
 		 * Whenever the error case occurs, we need to handle the error case.
 		 * Need to forward this error to v4l2 glue layer.
+		 * in this case the cb_item is the error_code as we may not have
+		 * an associated picture.
 		 */
 		global_core_ctx->vxd_str_processed_cb(core_str_ctx->vxd_dec_context,
-			(enum vxd_cb_type)cb_type, *((unsigned int *)cb_item));
+			(enum vxd_cb_type)cb_type, 0, *((unsigned int *)cb_item));
 		ret = IMG_SUCCESS;
 		break;
-
 	default:
 		return 0;
 	}
diff --git a/drivers/media/platform/imagination/vxe-vxd/decoder/decoder.c b/drivers/media/platform/imagination/vxe-vxd/decoder/decoder.c
index 4791d12f8fd2..3f0bed1fd148 100644
--- a/drivers/media/platform/imagination/vxe-vxd/decoder/decoder.c
+++ b/drivers/media/platform/imagination/vxe-vxd/decoder/decoder.c
@@ -4315,10 +4315,20 @@ static int decoder_picture_decoded(struct dec_str_ctx *dec_str_ctx,
 	 * Whenever the error flag is set, we need to handle the error case.
 	 * Need to forward this error to stream processed callback.
 	 */
-	if (error_flag) {
+	switch (error_flag) {
+	case VDEC_ERROR_NONE:
+	case VDEC_ERROR_CORRUPTED_REFERENCE:
+	case VDEC_ERROR_MISSING_REFERENCES:
+	case VDEC_ERROR_MMCO:
+	case VDEC_ERROR_MBS_DROPPED:
+		/* these are not fatal */
+		break;
+	default:
+		/* anything else is */
 		pr_err("%s : %d err_flags: 0x%x\n", __func__, __LINE__, error_flag);
 		ret = dec_str_ctx->str_processed_cb((void *)dec_str_ctx->usr_int_data,
 				VXD_CB_ERROR_FATAL, &error_flag);
+		break;
 	}
 	/*
 	 * check for eos on bitstream and propagate the same to picture
diff --git a/drivers/media/platform/imagination/vxe-vxd/decoder/vxd_dec.h b/drivers/media/platform/imagination/vxe-vxd/decoder/vxd_dec.h
index 8c3234cc50db..320e19d1deb9 100644
--- a/drivers/media/platform/imagination/vxe-vxd/decoder/vxd_dec.h
+++ b/drivers/media/platform/imagination/vxe-vxd/decoder/vxd_dec.h
@@ -176,7 +176,8 @@ enum vxd_cb_type {
  * @type: the type of message
  * @buf_map_id: the buf_map_id of the resource being returned
  */
-typedef void (*vxd_cb)(void *ctx, enum vxd_cb_type type, unsigned int buf_map_id);
+typedef void (*vxd_cb)(void *ctx, enum vxd_cb_type type, unsigned int buf_map_id,
+						unsigned int error_code);
 
 /*
  * struct vxd_return - contains information about items returning from core
diff --git a/drivers/media/platform/imagination/vxe-vxd/decoder/vxd_v4l2.c b/drivers/media/platform/imagination/vxe-vxd/decoder/vxd_v4l2.c
index 85d57527d1cc..76bfaf85bcff 100644
--- a/drivers/media/platform/imagination/vxe-vxd/decoder/vxd_v4l2.c
+++ b/drivers/media/platform/imagination/vxe-vxd/decoder/vxd_v4l2.c
@@ -410,7 +410,7 @@ static struct vxd_dec_q_data *get_q_data(struct vxd_dec_ctx *ctx,
 }
 
 static void vxd_return_resource(void *ctx_handle, enum vxd_cb_type type,
-				unsigned int buf_map_id)
+				unsigned int buf_map_id, unsigned int err_flags)
 {
 	struct vxd_return *res;
 	struct vxd_buffer *buf = NULL;
@@ -480,7 +480,16 @@ static void vxd_return_resource(void *ctx_handle, enum vxd_cb_type type,
 			vb2_set_plane_payload(&buf->buffer.vb.vb2_buf, i,
 					      ctx->pict_bufcfg.plane_size[i]);
 
-		v4l2_m2m_buf_done(&buf->buffer.vb, VB2_BUF_STATE_DONE);
+		/*
+		 * for fatal errors we will use the FATAL callback
+		 * however this will signal to v4l2 that this frame
+		 * has a (potentially concealled) error
+		 */
+		if (err_flags)
+			v4l2_m2m_buf_done(&buf->buffer.vb, VB2_BUF_STATE_ERROR);
+		else
+			v4l2_m2m_buf_done(&buf->buffer.vb, VB2_BUF_STATE_DONE);
+
 		break;
 	case VXD_CB_PICT_RELEASE:
 		buf = find_buffer(buf_map_id, &ctx->reuse_queue);
@@ -543,10 +552,11 @@ static void vxd_return_resource(void *ctx_handle, enum vxd_cb_type type,
 			if (!q_data)
 				break;
 
+			// terminal error, set planes to zero size and tell v4l2 layer
 			for (i = 0; i < q_data->fmt->num_planes; i++)
 				vb2_set_plane_payload(&vb->vb2_buf, i, 0);
 
-			v4l2_m2m_buf_done(vb, VB2_BUF_STATE_DONE);
+			v4l2_m2m_buf_done(vb, VB2_BUF_STATE_ERROR);
 		} else {
 			ctx->flag_last = TRUE;
 		}
@@ -1662,7 +1672,7 @@ static int vxd_dec_cmd(struct file *file, void *fh, struct v4l2_decoder_cmd *cmd
 #ifdef DEBUG_DECODER_DRIVER
 			pr_info("All buffers are decoded, so issue dummy stream end\n");
 #endif
-			vxd_return_resource((void *)ctx, VXD_CB_STR_END, 0);
+			vxd_return_resource((void *)ctx, VXD_CB_STR_END, 0, 0);
 		}
 	}
 
-- 
2.45.2

