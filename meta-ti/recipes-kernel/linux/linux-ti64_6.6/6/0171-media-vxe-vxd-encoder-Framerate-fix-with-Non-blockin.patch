From 5f42f2e06118c089b46c62d0ad464a6769cc0b77 Mon Sep 17 00:00:00 2001
From: Prasanth Babu Mantena <p-mantena@ti.com>
Date: Sun, 16 Jun 2024 21:45:16 -0500
Subject: [PATCH 171/222] media: vxe-vxd: encoder: Framerate fix with
 Non-blocking QBUF implementation

The patch fixes the framerate drop seen in the multi stream case.
The QBUF ioctl implementation was blocking on the writeback value
from the IP. This has been fixed to make Non-blocking QBUF calls
and enchancing the encoder framerate to 30fps in dual channel case.

Signed-off-by: Prasanth Babu Mantena <p-mantena@ti.com>
Signed-off-by: Darren Etheridge <detheridge@ti.com>
Signed-off-by: Brandon Brnich <b-brnich@ti.com>
---
 .../platform/vxe-vxd/encoder/topaz_api.c      | 22 +++++---
 .../media/platform/vxe-vxd/encoder/vxe_enc.h  |  1 +
 .../media/platform/vxe-vxd/encoder/vxe_v4l2.c | 54 ++++++++++++-------
 3 files changed, 50 insertions(+), 27 deletions(-)

diff --git a/drivers/media/platform/imagination/vxe-vxd/encoder/topaz_api.c b/drivers/media/platform/imagination/vxe-vxd/encoder/topaz_api.c
index 7534ad5f836a..66e073478cb0 100644
--- a/drivers/media/platform/imagination/vxe-vxd/encoder/topaz_api.c
+++ b/drivers/media/platform/imagination/vxe-vxd/encoder/topaz_api.c
@@ -623,13 +623,17 @@ int topaz_process_message(struct topaz_stream_context *str_ctx, struct mtx_tohos
 					(void *)(feedback_struct->coded_package->coded_buffer[0]),
 					feedback_struct->bytes_coded, video->frames_encoded);
 
-			if (feedback_struct->src_frame)
-				/* Send callback for coded_buffer ready */
-				global_topaz_core_context->vxe_str_processed_cb(str_ctx->vxe_ctx,
-					VXE_CB_SRC_FRAME_RELEASE,
-					(void *)(feedback_struct->src_frame),
-					0, 0);
-
+			if (!str_ctx->vxe_ctx->eos) {
+				if (feedback_struct->src_frame) {
+					/* Send callback for src ready */
+					global_topaz_core_context->vxe_str_processed_cb(
+						str_ctx->vxe_ctx,
+						VXE_CB_SRC_FRAME_RELEASE,
+						(void *)(feedback_struct
+								 ->src_frame),
+						0, 0);
+				}
+			}
 			if (video->flush_at_frame > 0 &&
 			    video->frames_encoded >= video->flush_at_frame)
 				feedback_struct->last_frame_encoded = TRUE;
@@ -755,7 +759,9 @@ void handle_encoder_firmware_response(struct img_writeback_msg *wb_msg, void *pr
 		tohost_msg.command_data_buf = NULL;
 	}
 
+	mutex_lock_nested(str_ctx->vxe_ctx->mutex, SUBCLASS_VXE_V4L2);
 	topaz_process_message(str_ctx, tohost_msg);
+	mutex_unlock(str_ctx->vxe_ctx->mutex);
 }
 
 static inline void populate_firmware_message(struct vidio_ddbufinfo *dest, unsigned int dest_offset,
@@ -2918,7 +2924,7 @@ int topaz_encode_frame(void *topaz_str_ctx)
 		/* Set bit 20 to 1 to inform FW that we are using the line counter feature */
 		encode_cmd_data |= F_ENCODE(1, MTX_MSG_ENCODE_USE_LINE_COUNTER);
 
-	topaz_insert_command_with_sync(enc, (enum mtx_cmd_id)
+	topaz_insert_command(enc, (enum mtx_cmd_id)
 				       (MTX_CMDID_ENCODE_FRAME | MTX_CMDID_WB_INTERRUPT),
 		encode_cmd_data);
 
diff --git a/drivers/media/platform/imagination/vxe-vxd/encoder/vxe_enc.h b/drivers/media/platform/imagination/vxe-vxd/encoder/vxe_enc.h
index 3cc42fe94c37..1df659a32c60 100644
--- a/drivers/media/platform/imagination/vxe-vxd/encoder/vxe_enc.h
+++ b/drivers/media/platform/imagination/vxe-vxd/encoder/vxe_enc.h
@@ -175,6 +175,7 @@ struct vxe_enc_ctx {
 	void **enc_context;
 	void *topaz_str_context;
 	struct mutex *mutex;
+	unsigned char core_streaming;
 	struct img_enc_caps caps;
 	struct img_rc_params rc;
 	struct img_video_params vparams;
diff --git a/drivers/media/platform/imagination/vxe-vxd/encoder/vxe_v4l2.c b/drivers/media/platform/imagination/vxe-vxd/encoder/vxe_v4l2.c
index a2dae750341e..e2b6df29ba8c 100644
--- a/drivers/media/platform/imagination/vxe-vxd/encoder/vxe_v4l2.c
+++ b/drivers/media/platform/imagination/vxe-vxd/encoder/vxe_v4l2.c
@@ -232,10 +232,12 @@ static void vxe_return_resource(void *ctx_handle, enum vxe_cb_type type,
 
 		v4l2_m2m_buf_done(&buf->buffer.vb, VB2_BUF_STATE_DONE);
 
-		if (coded_frm_cnt == ctx->last_frame_num)
+		if ((coded_frm_cnt == ctx->last_frame_num) && (coded_frm_cnt != 0)) {
 			vxe_eos(ctx);
-
-		v4l2_m2m_job_finish(ctx->dev->m2m_dev, ctx->fh.m2m_ctx);
+			ctx->eos = TRUE;
+		}
+		if (ctx->frames_encoding < 2)
+			v4l2_m2m_job_finish(ctx->dev->m2m_dev, ctx->fh.m2m_ctx);
 		break;
 	case VXE_CB_SRC_FRAME_RELEASE:
 		if (!img_buf_ref)
@@ -354,7 +356,7 @@ static int job_ready(void *priv)
 	if (((topaz_query_empty_source_slots(ctx->topaz_str_context) > 0) &&
 	     (v4l2_m2m_num_src_bufs_ready(ctx->fh.m2m_ctx) > 0)) &&
 	    ((topaz_query_empty_coded_slots(ctx->topaz_str_context) > 0) &&
-	    (v4l2_m2m_num_dst_bufs_ready(ctx->fh.m2m_ctx) > 0)))
+	    (v4l2_m2m_num_dst_bufs_ready(ctx->fh.m2m_ctx) > 0)) && ctx->core_streaming)
 		return 1;
 
 	/*
@@ -362,14 +364,15 @@ static int job_ready(void *priv)
 	 * that coded buffers are available
 	 */
 	if (ctx->eos && (v4l2_m2m_num_dst_bufs_ready(ctx->fh.m2m_ctx) > 0) &&
-	    (topaz_query_empty_coded_slots(ctx->topaz_str_context) > 0))
+	    (topaz_query_empty_coded_slots(ctx->topaz_str_context) > 0) && ctx->core_streaming)
 		return 1;
 
 	/*
 	 * Since we're allowing device_run for both submissions and actual
 	 * encodes, say job ready if buffers are ready in fw
 	 */
-	if (ctx->available_source_frames > 0 && ctx->available_coded_packages > 0)
+	if (ctx->available_source_frames > 0 && ctx->available_coded_packages > 0
+			&& ctx->core_streaming)
 		return 1;
 
 	return 0;
@@ -378,6 +381,9 @@ static int job_ready(void *priv)
 static void job_abort(void *priv)
 {
 	/* TODO: stub */
+	struct vxe_enc_ctx *ctx = priv;
+
+	ctx->core_streaming = FALSE;
 }
 
 static const struct v4l2_m2m_ops m2m_ops = {
@@ -598,6 +604,7 @@ static int vxe_start_streaming(struct vb2_queue *vq, unsigned int count)
 {
 	struct vxe_enc_ctx *ctx = vb2_get_drv_priv(vq);
 	struct vxe_enc_q_data *queue;
+	ctx->core_streaming = TRUE;
 
 	queue = get_queue(ctx, vq->type);
 	queue->streaming = TRUE;
@@ -610,20 +617,28 @@ static void vxe_stop_streaming(struct vb2_queue *vq)
 	struct vxe_enc_ctx *ctx = vb2_get_drv_priv(vq);
 	struct device *dev = ctx->dev->dev;
 	struct vb2_v4l2_buffer *vb;
+	struct vxe_enc_q_data *queue;
 
+	queue = get_queue(ctx, vq->type);
 	/* Unmap all buffers in v4l2 from mmu */
-	while (v4l2_m2m_num_dst_bufs_ready(ctx->fh.m2m_ctx)) {
-		vb = v4l2_m2m_dst_buf_remove(ctx->fh.m2m_ctx);
-		if (!vb)
-			dev_err(dev, "Next dst buffer is null\n");
-		v4l2_m2m_buf_done(vb, VB2_BUF_STATE_ERROR);
-	}
-	while (v4l2_m2m_num_src_bufs_ready(ctx->fh.m2m_ctx)) {
-		vb = v4l2_m2m_src_buf_remove(ctx->fh.m2m_ctx);
-		if (!vb)
-			dev_err(dev, "Next dst buffer is null\n");
-		v4l2_m2m_buf_done(vb, VB2_BUF_STATE_ERROR);
+	mutex_lock_nested(ctx->mutex, SUBCLASS_VXE_V4L2);
+	ctx->core_streaming = FALSE;
+	if (!V4L2_TYPE_IS_OUTPUT(queue->fmt->type)) {
+		while (v4l2_m2m_num_dst_bufs_ready(ctx->fh.m2m_ctx)) {
+			vb = v4l2_m2m_dst_buf_remove(ctx->fh.m2m_ctx);
+			if (!vb)
+				dev_err(dev, "Next dst buffer is null\n");
+			v4l2_m2m_buf_done(vb, VB2_BUF_STATE_ERROR);
+		}
+	} else {
+		while (v4l2_m2m_num_src_bufs_ready(ctx->fh.m2m_ctx)) {
+			vb = v4l2_m2m_src_buf_remove(ctx->fh.m2m_ctx);
+			if (!vb)
+				dev_err(dev, "Next dst buffer is null\n");
+			v4l2_m2m_buf_done(vb, VB2_BUF_STATE_ERROR);
+		}
 	}
+	mutex_unlock(ctx->mutex);
 }
 
 static const struct vb2_ops vxe_video_ops = {
@@ -1242,8 +1257,9 @@ static int vxe_cmd(struct file *file, void *fh, struct v4l2_encoder_cmd *cmd)
 		 * Buffers are still in firmware for encode. Tell topaz
 		 * that last frame sent is last frame in stream
 		 */
-		topaz_end_of_stream(ctx->topaz_str_context, ctx->frame_num + 1);
-		ctx->last_frame_num = ctx->frame_num + 1;
+		topaz_end_of_stream(ctx->topaz_str_context, ctx->frame_num);
+		ctx->last_frame_num = ctx->frame_num;
+		mutex_unlock((struct mutex *)ctx->mutex);
 	} else {
 		/* All buffers are encoded, so issue dummy stream end */
 		mutex_unlock((struct mutex *)ctx->mutex);
-- 
2.45.2

