From 0adfbf6ba7de2e2c9c653ce8997ced3df0de7fa7 Mon Sep 17 00:00:00 2001
From: Udit Kumar <u-kumar1@ti.com>
Date: Tue, 16 Jul 2024 22:54:18 +0530
Subject: [PATCH 426/438] remoteproc: k3-r5: Delay notification of wakeup event

Few times, core 1 was scheduled to boot first before core0.
Which leads to error
'k3_r5_rproc_start: can not start core 1 before core 0'.

This was happening due to some scheduling between prepare
and start callback. The probe function waits for event,
which is getting triggered by prepare callback.

To avoid above condition move even trigger to start instead
of prepare callback.

Fixes: 7dcf3e00aa95 ("remoteproc: k3-r5: Wait for core0 power-up before powering up core1")
Cc: Rahul Ravikumar <r-ravikumar@ti.com>
Cc: Hari Nagalla <hnagalla@ti.com>
Signed-off-by: Udit Kumar <u-kumar1@ti.com>
Reviewed-by: Beleswar Padhi <b-padhi@ti.com>
---
 drivers/remoteproc/ti_k3_r5_remoteproc.c | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

diff --git a/drivers/remoteproc/ti_k3_r5_remoteproc.c b/drivers/remoteproc/ti_k3_r5_remoteproc.c
index 0cac90c14d7f..db936e29acc3 100644
--- a/drivers/remoteproc/ti_k3_r5_remoteproc.c
+++ b/drivers/remoteproc/ti_k3_r5_remoteproc.c
@@ -674,8 +674,6 @@ static int k3_r5_rproc_prepare(struct rproc *rproc)
 			ret);
 		return ret;
 	}
-	core->released_from_reset = true;
-	wake_up_interruptible(&cluster->core_transition);
 
 	/*
 	 * Newer IP revisions like on J7200 SoCs support h/w auto-initialization
@@ -800,7 +798,7 @@ static int k3_r5_rproc_start(struct rproc *rproc)
 	}
 
 	kproc->rproc->state = RPROC_RUNNING;
-	return 0;
+	goto release_wait;
 
 unroll_core_run:
 	list_for_each_entry_continue(core, &cluster->cores, elem) {
@@ -809,6 +807,11 @@ static int k3_r5_rproc_start(struct rproc *rproc)
 	}
 put_mbox:
 	mbox_free_channel(kproc->mbox);
+
+release_wait:
+	core->released_from_reset = true;
+	wake_up_interruptible(&cluster->core_transition);
+
 	return ret;
 }
 
-- 
2.45.2

