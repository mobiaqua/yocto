From ad280b1d1fcd92acd207b920f38424ce7e982445 Mon Sep 17 00:00:00 2001
From: Devarsh Thakkar <devarsht@ti.com>
Date: Tue, 2 Jul 2024 23:19:47 +0530
Subject: [PATCH 381/409] fbdev: simplefb: Add support to power up multiple PM
 domains

Some devices such as AM62P [1] may have multiple power domains
to power up the display.

So during driver probe, power up all attached PM domains
enumerated in devicetree node.

Link: https://www.ti.com/lit/ug/spruiv7a/spruiv7a.pdf [1]
Signed-off-by: Devarsh Thakkar <devarsht@ti.com>
Reviewed-by: Aradhya Bhatia <a-bhatia1@ti.com>
---
 drivers/video/fbdev/simplefb.c | 77 +++++++++++++++++++++++++++++++++-
 1 file changed, 76 insertions(+), 1 deletion(-)

diff --git a/drivers/video/fbdev/simplefb.c b/drivers/video/fbdev/simplefb.c
index 62f99f6fccd3..80501592d267 100644
--- a/drivers/video/fbdev/simplefb.c
+++ b/drivers/video/fbdev/simplefb.c
@@ -19,6 +19,7 @@
 #include <linux/module.h>
 #include <linux/platform_data/simplefb.h>
 #include <linux/platform_device.h>
+#include <linux/pm_domain.h>
 #include <linux/clk.h>
 #include <linux/of.h>
 #include <linux/of_clk.h>
@@ -82,6 +83,9 @@ struct simplefb_par {
 	u32 regulator_count;
 	struct regulator **regulators;
 #endif
+	int num_domains; /* Handle attached PM domains */
+	struct device **pd_dev;
+	struct device_link **pd_link;
 };
 
 static void simplefb_clocks_destroy(struct simplefb_par *par);
@@ -196,6 +200,70 @@ static int simplefb_parse_pd(struct platform_device *pdev,
 	return 0;
 }
 
+static int simplefb_detach_pm_domains(struct simplefb_par *par, struct platform_device *pdev)
+{
+	int i;
+
+	if (par->num_domains <= 1)
+		return 0;
+
+	for (i = 0; i < par->num_domains; i++) {
+		if (par->pd_link[i] && !IS_ERR(par->pd_link[i]))
+			device_link_del(par->pd_link[i]);
+		if (par->pd_dev[i] && !IS_ERR(par->pd_dev[i]))
+			dev_pm_domain_detach(par->pd_dev[i], true);
+		par->pd_dev[i] = NULL;
+		par->pd_link[i] = NULL;
+	}
+
+	return 0;
+}
+
+static int simplefb_attach_pm_domains(struct simplefb_par *par, struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct device_node *np = pdev->dev.of_node;
+	int i, ret;
+
+	par->num_domains = of_count_phandle_with_args(np, "power-domains",
+						      "#power-domain-cells");
+	if (par->num_domains <= 1) {
+		dev_dbg(dev, "One or less power domains, no need to do attach domains\n");
+		return 0;
+	}
+
+	par->pd_dev = devm_kmalloc_array(dev, par->num_domains,
+					 sizeof(*par->pd_dev), GFP_KERNEL);
+	if (!par->pd_dev)
+		return -ENOMEM;
+
+	par->pd_link = devm_kmalloc_array(dev, par->num_domains,
+					  sizeof(*par->pd_link), GFP_KERNEL);
+	if (!par->pd_link)
+		return -ENOMEM;
+
+	for (i = 0; i < par->num_domains; i++) {
+		par->pd_dev[i] = dev_pm_domain_attach_by_id(dev, i);
+		if (IS_ERR(par->pd_dev[i])) {
+			ret = PTR_ERR(par->pd_dev[i]);
+			goto fail;
+		}
+
+		par->pd_link[i] = device_link_add(dev, par->pd_dev[i],
+						  DL_FLAG_STATELESS |
+						  DL_FLAG_PM_RUNTIME | DL_FLAG_RPM_ACTIVE);
+		if (!par->pd_link[i]) {
+			ret = -EINVAL;
+			goto fail;
+		}
+	}
+
+	return 0;
+fail:
+	simplefb_detach_pm_domains(par, pdev);
+	return ret;
+}
+
 #if defined CONFIG_OF && defined CONFIG_COMMON_CLK
 /*
  * Clock handling code.
@@ -485,10 +553,14 @@ static int simplefb_probe(struct platform_device *pdev)
 	}
 	info->pseudo_palette = par->palette;
 
-	ret = simplefb_clocks_get(par, pdev);
+	ret = simplefb_attach_pm_domains(par, pdev);
 	if (ret < 0)
 		goto error_unmap;
 
+	ret = simplefb_clocks_get(par, pdev);
+	if (ret < 0)
+		goto error_detach_pm_domains;
+
 	ret = simplefb_regulators_get(par, pdev);
 	if (ret < 0)
 		goto error_clocks;
@@ -525,6 +597,8 @@ static int simplefb_probe(struct platform_device *pdev)
 	simplefb_regulators_destroy(par);
 error_clocks:
 	simplefb_clocks_destroy(par);
+error_detach_pm_domains:
+	simplefb_detach_pm_domains(par, pdev);
 error_unmap:
 	iounmap(info->screen_base);
 error_fb_release:
@@ -539,6 +613,7 @@ static void simplefb_remove(struct platform_device *pdev)
 {
 	struct fb_info *info = platform_get_drvdata(pdev);
 
+	simplefb_detach_pm_domains(info->par, pdev);
 	/* simplefb_destroy takes care of info cleanup */
 	unregister_framebuffer(info);
 }
-- 
2.45.2

