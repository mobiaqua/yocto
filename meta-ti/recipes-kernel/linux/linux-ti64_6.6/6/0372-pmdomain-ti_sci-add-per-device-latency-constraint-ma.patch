From ca11e100862310b1abdd072b113bae8a68ad26b7 Mon Sep 17 00:00:00 2001
From: Kevin Hilman <khilman@baylibre.com>
Date: Wed, 3 Jul 2024 11:19:23 +0530
Subject: [PATCH 372/409] pmdomain: ti_sci: add per-device latency constraint
 management

For each device in a TI SCI PM domain, check whether the device has
any resume latency constraints set via per-device PM QoS.  If
constraints are set, send them to DM via the new SCI constraints API.

Checking for constraints happen:

1) before SCI PM domain power off (->power_off() hook)
2) before system-wide suspend (via ->suspend() hook)

For TI SCI devices that are runtime PM enabled, check (1) will be the
primary method, and will happen when the TI SCI PM domain is powered
off (e.g. when the runtime PM usecount of the last device in that
domain goes to zero.)

For devices that are either not runtime PM enabled, or are not yet
runtime suspended (e.g. due to being used during the suspend path),
the constraints check will happen by check(2).

Since constraints can be sent by either (1) or (2), driver keeps track
of whether a valid constraint has been sent already.

Note: DM firmware clears constraints during its resume, so Linux has
to check/update/send constraints each time system suspends.

Co-developed-by: Vibhore Vardhan <vibhore@ti.com>
Signed-off-by: Vibhore Vardhan <vibhore@ti.com>
Signed-off-by: Kevin Hilman <khilman@baylibre.com>
Signed-off-by: Dhruva Gole <d-gole@ti.com>
---
 drivers/pmdomain/ti/ti_sci_pm_domains.c | 107 +++++++++++++++++++++++-
 1 file changed, 106 insertions(+), 1 deletion(-)

diff --git a/drivers/pmdomain/ti/ti_sci_pm_domains.c b/drivers/pmdomain/ti/ti_sci_pm_domains.c
index 34645104fe45..6768cef711d6 100644
--- a/drivers/pmdomain/ti/ti_sci_pm_domains.c
+++ b/drivers/pmdomain/ti/ti_sci_pm_domains.c
@@ -13,6 +13,8 @@
 #include <linux/platform_device.h>
 #include <linux/pm_domain.h>
 #include <linux/slab.h>
+#include <linux/pm_qos.h>
+#include <linux/pm_runtime.h>
 #include <linux/soc/ti/ti_sci_protocol.h>
 #include <dt-bindings/soc/ti,sci_pm_domain.h>
 
@@ -47,10 +49,41 @@ struct ti_sci_pm_domain {
 	struct generic_pm_domain pd;
 	struct list_head node;
 	struct ti_sci_genpd_provider *parent;
+	s32 lat_constraint;
+	bool constraint_sent;
 };
 
 #define genpd_to_ti_sci_pd(gpd) container_of(gpd, struct ti_sci_pm_domain, pd)
 
+static inline bool ti_sci_pd_is_valid_constraint(s32 val)
+{
+	return val != PM_QOS_RESUME_LATENCY_NO_CONSTRAINT;
+}
+
+static int ti_sci_pd_send_constraint(struct device *dev, s32 val)
+{
+	struct generic_pm_domain *genpd = pd_to_genpd(dev->pm_domain);
+	struct ti_sci_pm_domain *pd = genpd_to_ti_sci_pd(genpd);
+	const struct ti_sci_handle *ti_sci = pd->parent->ti_sci;
+	int ret;
+
+	ret = ti_sci->ops.pm_ops.set_latency_constraint(ti_sci, val, TISCI_MSG_CONSTRAINT_SET);
+	if (!ret)
+		pd->constraint_sent = true;
+
+	WARN_ON(ret != 0);
+	return ret;
+}
+
+static inline void ti_sci_pd_clear_constraints(struct device *dev)
+{
+	struct generic_pm_domain *genpd = pd_to_genpd(dev->pm_domain);
+	struct ti_sci_pm_domain *pd = genpd_to_ti_sci_pd(genpd);
+
+	pd->lat_constraint = PM_QOS_RESUME_LATENCY_NO_CONSTRAINT;
+	pd->constraint_sent = false;
+}
+
 /*
  * ti_sci_pd_power_off(): genpd power down hook
  * @domain: pointer to the powerdomain to power off
@@ -59,6 +92,18 @@ static int ti_sci_pd_power_off(struct generic_pm_domain *domain)
 {
 	struct ti_sci_pm_domain *pd = genpd_to_ti_sci_pd(domain);
 	const struct ti_sci_handle *ti_sci = pd->parent->ti_sci;
+	struct pm_domain_data *pdd;
+
+	list_for_each_entry(pdd, &domain->dev_list, list_node) {
+		struct device *dev = pdd->dev;
+		s32 val;
+
+		/* If device has any resume latency constraints, send 'em */
+		val = dev_pm_qos_read_value(dev, DEV_PM_QOS_RESUME_LATENCY);
+		if (ti_sci_pd_is_valid_constraint(val) && !pd->constraint_sent)
+			ti_sci_pd_send_constraint(dev, val);
+		pd->lat_constraint = val;
+	}
 
 	return ti_sci->ops.dev_ops.put_device(ti_sci, pd->idx);
 }
@@ -71,6 +116,11 @@ static int ti_sci_pd_power_on(struct generic_pm_domain *domain)
 {
 	struct ti_sci_pm_domain *pd = genpd_to_ti_sci_pd(domain);
 	const struct ti_sci_handle *ti_sci = pd->parent->ti_sci;
+	struct pm_domain_data *pdd;
+
+	list_for_each_entry(pdd, &domain->dev_list, list_node) {
+		ti_sci_pd_clear_constraints(pdd->dev);
+	}
 
 	if (pd->exclusive)
 		return ti_sci->ops.dev_ops.get_device_exclusive(ti_sci,
@@ -79,6 +129,52 @@ static int ti_sci_pd_power_on(struct generic_pm_domain *domain)
 		return ti_sci->ops.dev_ops.get_device(ti_sci, pd->idx);
 }
 
+static int ti_sci_pd_resume(struct device *dev)
+{
+	ti_sci_pd_clear_constraints(dev);
+	return pm_generic_resume(dev);
+}
+
+static int ti_sci_pd_suspend(struct device *dev)
+{
+	struct generic_pm_domain *genpd = pd_to_genpd(dev->pm_domain);
+	struct ti_sci_pm_domain *pd = genpd_to_ti_sci_pd(genpd);
+	s32 val;
+
+	/* Check if device has any resume latency constraints */
+	val = dev_pm_qos_read_value(dev, DEV_PM_QOS_RESUME_LATENCY);
+	if (ti_sci_pd_is_valid_constraint(val) && !pd->constraint_sent) {
+		if (genpd && genpd->status == GENPD_STATE_OFF)
+			dev_warn(dev, "%s: %s: already off.\n", genpd->name, __func__);
+		else if (pm_runtime_suspended(dev))
+			dev_warn(dev, "%s: %s: already RPM suspended.\n", genpd->name, __func__);
+		else
+			ti_sci_pd_send_constraint(dev, val);
+	}
+	pd->lat_constraint = val;
+
+	return pm_generic_suspend(dev);
+}
+
+static int ti_sci_pd_suspend_late(struct device *dev)
+{
+	struct generic_pm_domain *genpd = pd_to_genpd(dev->pm_domain);
+	struct ti_sci_pm_domain *pd = genpd_to_ti_sci_pd(genpd);
+
+	if (pm_runtime_suspended(dev)) {
+		if (genpd && genpd->status == GENPD_STATE_OFF)
+			dev_warn(dev, "%s: RPM suspended but genpd %s still on.\n",
+				 __func__, genpd->name);
+	}
+
+	if (ti_sci_pd_is_valid_constraint(pd->lat_constraint) &&
+	    !pd->constraint_sent)
+		dev_warn(dev, "%s: %s: valid constraint (%d), but NOT sent!\n",
+			 genpd->name, __func__, pd->lat_constraint);
+
+	return pm_generic_suspend_late(dev);
+}
+
 /*
  * ti_sci_pd_xlate(): translation service for TI SCI genpds
  * @genpdspec: DT identification data for the genpd
@@ -166,7 +262,16 @@ static int ti_sci_pm_domain_probe(struct platform_device *pdev)
 				pd->pd.power_on = ti_sci_pd_power_on;
 				pd->idx = args.args[0];
 				pd->parent = pd_provider;
-
+				pd->lat_constraint = PM_QOS_RESUME_LATENCY_NO_CONSTRAINT;
+				/*
+				 * If SCI constraint functions are present, then firmware
+				 * supports the constraints API.
+				 */
+				if (pd_provider->ti_sci->ops.pm_ops.set_device_constraint) {
+					pd->pd.domain.ops.resume = ti_sci_pd_resume;
+					pd->pd.domain.ops.suspend = ti_sci_pd_suspend;
+					pd->pd.domain.ops.suspend_late = ti_sci_pd_suspend_late;
+				}
 				pm_genpd_init(&pd->pd, NULL, true);
 
 				list_add(&pd->node, &pd_provider->pd_list);
-- 
2.45.2

