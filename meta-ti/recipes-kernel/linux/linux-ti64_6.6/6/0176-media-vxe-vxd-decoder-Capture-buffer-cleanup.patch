From b7728caba007d6b10f78c770ae4611b32159d726 Mon Sep 17 00:00:00 2001
From: Brandon Brnich <b-brnich@ti.com>
Date: Sun, 16 Jun 2024 21:45:21 -0500
Subject: [PATCH 176/222] media: vxe-vxd: decoder: Capture buffer cleanup

Buffers were being left in active state when streams were stopped
which resulted in memory leaks and failures when restarting pipelines.

Signed-off-by: Brandon Brnich <b-brnich@ti.com>
Signed-off-by: Darren Etheridge <detheridge@ti.com>
---
 .../media/platform/vxe-vxd/common/resource.c  |  6 +++--
 .../media/platform/vxe-vxd/decoder/vxd_v4l2.c | 22 +++++++++++++++----
 2 files changed, 22 insertions(+), 6 deletions(-)

diff --git a/drivers/media/platform/imagination/vxe-vxd/common/resource.c b/drivers/media/platform/imagination/vxe-vxd/common/resource.c
index c3dd6d010d73..74e22818fad6 100644
--- a/drivers/media/platform/imagination/vxe-vxd/common/resource.c
+++ b/drivers/media/platform/imagination/vxe-vxd/common/resource.c
@@ -451,8 +451,10 @@ int resource_list_replace(struct lst_t *list, void *item, unsigned int id, unsig
 				if (fn_freeitem)
 					fn_freeitem(listelem->item,
 						    free_cb_param);
-				else
-					kfree(listelem->item);
+				else {
+					if (!listelem->item)
+						kfree(listelem->item);
+				}
 				listelem->item = NULL;
 			}
 
diff --git a/drivers/media/platform/imagination/vxe-vxd/decoder/vxd_v4l2.c b/drivers/media/platform/imagination/vxe-vxd/decoder/vxd_v4l2.c
index 53c68e896df1..0bbb67052205 100644
--- a/drivers/media/platform/imagination/vxe-vxd/decoder/vxd_v4l2.c
+++ b/drivers/media/platform/imagination/vxe-vxd/decoder/vxd_v4l2.c
@@ -308,6 +308,8 @@ static struct vxd_mapping *find_mapping(unsigned int buf_map_id, struct list_hea
 
 	list_for_each(list, head) {
 		mapping = list_entry(list, struct vxd_mapping, list);
+		if (!mapping)
+			continue;
 		if (mapping->buf_map_id == buf_map_id)
 			break;
 		mapping = NULL;
@@ -322,6 +324,8 @@ static struct vxd_buffer *find_buffer(unsigned int buf_map_id, struct list_head
 
 	list_for_each(list, head) {
 		buf = list_entry(list, struct vxd_buffer, list);
+		if (!buf)
+			continue;
 		if (buf->buf_map_id == buf_map_id)
 			break;
 		buf = NULL;
@@ -867,9 +871,9 @@ static int vxd_dec_start_streaming(struct vb2_queue *vq, unsigned int count)
 	struct vxd_dec_ctx *ctx = vb2_get_drv_priv(vq);
 
 	if (V4L2_TYPE_IS_OUTPUT(vq->type))
-		ctx->dst_streaming = TRUE;
-	else
 		ctx->src_streaming = TRUE;
+	else
+		ctx->dst_streaming = TRUE;
 
 	if (ctx->dst_streaming && ctx->src_streaming && !ctx->core_streaming) {
 		if (!ctx->stream_configured) {
@@ -900,9 +904,9 @@ static void vxd_dec_stop_streaming(struct vb2_queue *vq)
 	struct vxd_mapping *mapping = NULL;
 
 	if (V4L2_TYPE_IS_OUTPUT(vq->type))
-		ctx->dst_streaming = FALSE;
-	else
 		ctx->src_streaming = FALSE;
+	else
+		ctx->dst_streaming = FALSE;
 
 	if (!ctx->stream_created) {
 		vxd_dec_return_all_buffers(ctx, vq, VB2_BUF_STATE_ERROR);
@@ -930,6 +934,11 @@ static void vxd_dec_stop_streaming(struct vb2_queue *vq)
 			v4l2_m2m_buf_queue(ctx->fh.m2m_ctx, &buf->buffer.vb);
 		}
 
+		list_for_each(list, &ctx->cap_buffers) {
+			buf = list_entry(list, struct vxd_buffer, list);
+			__list_del_entry(&buf->list);
+		}
+
 		list_for_each(list, &ctx->cap_mappings) {
 			mapping = list_entry(list, struct vxd_mapping, list);
 			core_stream_unmap_buf_sg(mapping->buf_map_id);
@@ -1130,6 +1139,11 @@ static int vxd_dec_release(struct file *file)
 		__list_del_entry(&buf->list);
 	}
 
+	list_for_each(list, &ctx->cap_buffers) {
+		buf = list_entry(list, struct vxd_buffer, list);
+		__list_del_entry(&buf->list);
+	}
+
 	list_for_each_safe(list, temp, &ctx->reuse_queue) {
 		buf = list_entry(list, struct vxd_buffer, list);
 		core_stream_unmap_buf_sg(buf->buf_map_id);
-- 
2.45.2

