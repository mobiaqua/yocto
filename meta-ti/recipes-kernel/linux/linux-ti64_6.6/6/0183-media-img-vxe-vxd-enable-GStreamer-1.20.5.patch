From 06bd325e5fc264caed0baeab33c4d24c2a6fde0d Mon Sep 17 00:00:00 2001
From: Darren Etheridge <detheridge@ti.com>
Date: Sun, 16 Jun 2024 21:45:28 -0500
Subject: [PATCH 183/222] media: img: vxe-vxd: enable GStreamer 1.20.5

This patch makes the vxe-vxd driver more accurately implement the v4l2
spec and no longer needs a patched up GStreamer
to be carried in Kirkstone.  Kirkstone also moves to GStreamer 1.20.5
which needs a much more v4l2 complaint driver to work with the
v4l2h264enc and v4l2h264dec plugins.

For encode this kind of syntax is now accepted.
gst-launch-1.0 videotestsrc num_buffers=1000 ! \
capssetter caps="video/x-raw,width=1280,height=720,framerate=30/1,format=NV12" ! \
v4l2h264enc extra-controls=s,video_bitrate=1000000 ! \
capssetter caps="video/x-h264,profile=constrained-baseline,level=(string)3.1" ! \
filesink location=test.264

However it is not working as per the v4l2 spec yet and will need some of
my follow on bug fix patches.

Signed-off-by: Darren Etheridge <detheridge@ti.com>
Signed-off-by: Vignesh Raghavendra <vigneshr@ti.com>
Signed-off-by: Brandon Brnich <b-brnich@ti.com>
---
 .../platform/imagination/vxe-vxd/decoder/hw_control.c |   1 -
 .../platform/imagination/vxe-vxd/decoder/vxd_dec.h    |   2 +
 .../platform/imagination/vxe-vxd/decoder/vxd_v4l2.c   |  11 +-
 .../platform/imagination/vxe-vxd/encoder/topaz_api.c  |  18 +-
 .../platform/imagination/vxe-vxd/encoder/topaz_api.h  |   2 +-
 .../platform/imagination/vxe-vxd/encoder/vxe_enc.c    |   1 +
 .../platform/imagination/vxe-vxd/encoder/vxe_enc.h    |  20 +-
 .../platform/imagination/vxe-vxd/encoder/vxe_v4l2.c   | 589 +++++++-----------
 8 files changed, 267 insertions(+), 377 deletions(-)

diff --git a/drivers/media/platform/imagination/vxe-vxd/decoder/hw_control.c b/drivers/media/platform/imagination/vxe-vxd/decoder/hw_control.c
index ad457144d519..c163c9f64f8c 100644
--- a/drivers/media/platform/imagination/vxe-vxd/decoder/hw_control.c
+++ b/drivers/media/platform/imagination/vxe-vxd/decoder/hw_control.c
@@ -179,7 +179,6 @@ static int vdeckm_handle_mtxtohost_msg(unsigned int *msg, struct lst_t *pend_pic
 		unsigned int mbs_recovered = 0;
 		unsigned char flag = 0;
 
-		pr_debug("Received message from firmware\n");
 		error_flags = MEMIO_READ_FIELD(msg, FW_DEVA_COMPLETED_ERROR_FLAGS);
 
 		no_bewdts = MEMIO_READ_FIELD(msg, FW_DEVA_COMPLETED_NUM_BEWDTS);
diff --git a/drivers/media/platform/imagination/vxe-vxd/decoder/vxd_dec.h b/drivers/media/platform/imagination/vxe-vxd/decoder/vxd_dec.h
index 896bce6fc925..8c3234cc50db 100644
--- a/drivers/media/platform/imagination/vxe-vxd/decoder/vxd_dec.h
+++ b/drivers/media/platform/imagination/vxe-vxd/decoder/vxd_dec.h
@@ -431,6 +431,8 @@ struct vxd_dec_ctx {
 	unsigned char flag_last;
 	unsigned char num_decoding;
 	unsigned int max_num_ref_frames;
+	unsigned int cap_seq; /* sequence number for capture port */
+	unsigned int out_seq; /* sequence number for output port */
 	struct vdec_str_opconfig str_opcfg;
 	struct vdec_pict_bufconfig pict_bufcfg;
 	void *bspp_context;
diff --git a/drivers/media/platform/imagination/vxe-vxd/decoder/vxd_v4l2.c b/drivers/media/platform/imagination/vxe-vxd/decoder/vxd_v4l2.c
index 41a97a8cde1f..85d57527d1cc 100644
--- a/drivers/media/platform/imagination/vxe-vxd/decoder/vxd_v4l2.c
+++ b/drivers/media/platform/imagination/vxe-vxd/decoder/vxd_v4l2.c
@@ -432,6 +432,7 @@ static void vxd_return_resource(void *ctx_handle, enum vxd_cb_type type,
 			break;
 		}
 		buf->buffer.vb.field = V4L2_FIELD_NONE;
+
 		q_data = get_q_data(ctx, buf->buffer.vb.vb2_buf.vb2_queue->type);
 		if (!q_data)
 			return;
@@ -470,6 +471,7 @@ static void vxd_return_resource(void *ctx_handle, enum vxd_cb_type type,
 		}
 		buf->mapping->reuse = FALSE;
 		buf->buffer.vb.field = V4L2_FIELD_NONE;
+
 		q_data = get_q_data(ctx, buf->buffer.vb.vb2_buf.vb2_queue->type);
 		if (!q_data)
 			return;
@@ -822,8 +824,10 @@ static void vxd_dec_buf_queue(struct vb2_buffer *vb)
 	int i;
 
 	if (V4L2_TYPE_IS_OUTPUT(vb->type)) {
+		vbuf->sequence = ctx->out_seq++;
 		v4l2_m2m_buf_queue(ctx->fh.m2m_ctx, vbuf);
 	} else {
+		vbuf->sequence = ctx->cap_seq++;
 		mutex_lock_nested(ctx->mutex, SUBCLASS_VXD_V4L2);
 		if (buf->mapping->reuse) {
 			mutex_unlock(ctx->mutex);
@@ -1215,7 +1219,6 @@ static int __enum_fmt(struct v4l2_fmtdesc *f, unsigned int type)
 {
 	int i, index;
 	struct vxd_dec_fmt *fmt = NULL;
-
 	index = 0;
 	for (i = 0; i < ARRAY_SIZE(vxd_dec_formats); ++i) {
 		if (vxd_dec_formats[i].type & type) {
@@ -1245,7 +1248,6 @@ static int vxd_dec_enum_fmt(struct file *file, void *priv, struct v4l2_fmtdesc *
 static struct vxd_dec_fmt *find_format(struct v4l2_format *f, unsigned int type)
 {
 	int i;
-
 	for (i = 0; i < ARRAY_SIZE(vxd_dec_formats); ++i) {
 		if (vxd_dec_formats[i].fourcc == f->fmt.pix_mp.pixelformat &&
 		    vxd_dec_formats[i].type == type)
@@ -1778,6 +1780,9 @@ static void device_run(void *priv)
 	if (!dst_vb)
 		dev_err(dev, "Next dst buffer is null\n");
 
+
+	dst_vb->vb2_buf.timestamp = src_vb->vb2_buf.timestamp;
+
 	src_vxdb = container_of(src_vb, struct vxd_buffer, buffer.vb);
 	dst_vxdb = container_of(dst_vb, struct vxd_buffer, buffer.vb);
 
@@ -1794,7 +1799,7 @@ static void device_run(void *priv)
 		dev_err(dev, "bspp_stream_submit_buffer failed %d\n", ret);
 
 	if (ctx->stop_initiated &&
-	    (v4l2_m2m_num_src_bufs_ready(ctx->fh.m2m_ctx) == 0))
+			(v4l2_m2m_num_src_bufs_ready(ctx->fh.m2m_ctx) == 0))
 		ctx->eos = TRUE;
 
 	mutex_unlock(ctx->mutex);
diff --git a/drivers/media/platform/imagination/vxe-vxd/encoder/topaz_api.c b/drivers/media/platform/imagination/vxe-vxd/encoder/topaz_api.c
index 7c70457b2483..fcc90cb03fd9 100644
--- a/drivers/media/platform/imagination/vxe-vxd/encoder/topaz_api.c
+++ b/drivers/media/platform/imagination/vxe-vxd/encoder/topaz_api.c
@@ -616,12 +616,14 @@ int topaz_process_message(struct topaz_stream_context *str_ctx, struct mtx_tohos
 			pr_info("FRAMES_CODED[%d]\n", video->frames_encoded);
 #endif
 
-			if (feedback_struct->coded_package->coded_buffer[0])
+			if (feedback_struct->coded_package->coded_buffer[0]) {
 				/* Send callback for coded_buffer ready */
 				global_topaz_core_context->vxe_str_processed_cb(str_ctx->vxe_ctx,
 					VXE_CB_CODED_BUFF_READY,
 					(void *)(feedback_struct->coded_package->coded_buffer[0]),
-					feedback_struct->bytes_coded, video->frames_encoded);
+					feedback_struct->bytes_coded, video->frames_encoded,
+					feedback_struct->frame_type);
+			}
 
 			if (!str_ctx->vxe_ctx->eos) {
 				if (feedback_struct->src_frame) {
@@ -631,7 +633,7 @@ int topaz_process_message(struct topaz_stream_context *str_ctx, struct mtx_tohos
 						VXE_CB_SRC_FRAME_RELEASE,
 						(void *)(feedback_struct
 								 ->src_frame),
-						0, 0);
+						0, 0, 0);
 				}
 			}
 			if (video->flush_at_frame > 0 &&
@@ -665,12 +667,14 @@ int topaz_process_message(struct topaz_stream_context *str_ctx, struct mtx_tohos
 				video->extra_wb_retrieved--;
 			}
 		} else {
-			if (feedback_struct->coded_package->coded_buffer[0])
+			if (feedback_struct->coded_package->coded_buffer[0]) {
 				/* Send callback for coded_buffer ready */
 				global_topaz_core_context->vxe_str_processed_cb(str_ctx->vxe_ctx,
 					VXE_CB_CODED_BUFF_READY,
 					(void *)(feedback_struct->coded_package->coded_buffer[0]),
-					feedback_struct->bytes_coded, video->frames_encoded);
+					feedback_struct->bytes_coded, video->frames_encoded,
+					feedback_struct->frame_type);
+			}
 		}
 
 		if (feedback_struct->entire_frame &&
@@ -3057,7 +3061,7 @@ int topaz_flush_stream(void *topaz_str_ctx, unsigned int frame_cnt)
 			global_topaz_core_context->vxe_str_processed_cb(str_ctx->vxe_ctx,
 				VXE_CB_SRC_FRAME_RELEASE,
 				(void *)(enc->video->source_slot_buff[index]),
-				0, 0);
+				0, 0, 0);
 			enc->video->source_slot_buff[index] = NULL;
 		}
 	}
@@ -3069,7 +3073,7 @@ int topaz_flush_stream(void *topaz_str_ctx, unsigned int frame_cnt)
 			global_topaz_core_context->vxe_str_processed_cb(str_ctx->vxe_ctx,
 				VXE_CB_CODED_BUFF_READY,
 				(void *)(enc->video->coded_package[index]->coded_buffer[0]),
-				0, 0);
+				0, 0, 0);
 			enc->video->coded_package[index]->busy = FALSE;
 		}
 	}
diff --git a/drivers/media/platform/imagination/vxe-vxd/encoder/topaz_api.h b/drivers/media/platform/imagination/vxe-vxd/encoder/topaz_api.h
index d952b26e4119..e8948d67fce7 100644
--- a/drivers/media/platform/imagination/vxe-vxd/encoder/topaz_api.h
+++ b/drivers/media/platform/imagination/vxe-vxd/encoder/topaz_api.h
@@ -60,7 +60,7 @@ enum vxe_cb_type {
 };
 
 typedef void (*vxe_cb)(void *ctx, enum vxe_cb_type type, void *buf_ref, unsigned int size,
-		unsigned int coded_frm_cnt);
+		unsigned int coded_frm_cnt, enum img_frame_type frame_type);
 
 /*
  * Enum specifying video encode profile
diff --git a/drivers/media/platform/imagination/vxe-vxd/encoder/vxe_enc.c b/drivers/media/platform/imagination/vxe-vxd/encoder/vxe_enc.c
index 0c338bd1c37b..cab01e5487cc 100644
--- a/drivers/media/platform/imagination/vxe-vxd/encoder/vxe_enc.c
+++ b/drivers/media/platform/imagination/vxe-vxd/encoder/vxe_enc.c
@@ -431,6 +431,7 @@ void vxe_fill_default_params(struct vxe_enc_ctx *ctx)
 	ctx->vparams.enable_scaler = FALSE;
 	ctx->vparams.line_counter_enabled = FALSE;
 
+	ctx->rc.intra_freq = 30;
 	ctx->rc.initial_qp_i = 0;
 	ctx->rc.initial_qp_p = 0;
 	ctx->rc.initial_qp_b = 0;
diff --git a/drivers/media/platform/imagination/vxe-vxd/encoder/vxe_enc.h b/drivers/media/platform/imagination/vxe-vxd/encoder/vxe_enc.h
index 1df659a32c60..b3b9409b8f98 100644
--- a/drivers/media/platform/imagination/vxe-vxd/encoder/vxe_enc.h
+++ b/drivers/media/platform/imagination/vxe-vxd/encoder/vxe_enc.h
@@ -141,6 +141,16 @@ struct vxe_dev {
 #define S_FMT_FLAG_CAP_RECV 0x2
 #define S_FMT_FLAG_STREAM_CREATED 0x4
 
+#define VXE_ENCODER_MAX_WIDTH 1920
+#define VXE_ENCODER_MIN_WIDTH 64
+#define VXE_ENCODER_MAX_HEIGHT 1080
+#define VXE_ENCODER_MIN_HEIGHT 64
+
+#define VXE_ENCODER_DEFAULT_HEIGHT 240
+#define VXE_ENCODER_DEFAULT_WIDTH 416
+#define VXE_ENCODER_INITIAL_QP_I 18
+#define VXE_ENCODER_DEFAULT_FRAMERATE 30
+
 /*
  * struct vxe_enc_q_data - contains queue data information
  *
@@ -196,6 +206,14 @@ struct vxe_enc_ctx {
 	unsigned int frames_encoding;
 	unsigned int frame_num;
 	unsigned int last_frame_num;
+	unsigned int cap_seq;   /* sequence number on capture port */
+	unsigned int out_seq;   /* sequence number on output port */
+
+	enum v4l2_colorspace colorspace;
+	enum v4l2_xfer_func xfer_func;
+	enum v4l2_ycbcr_encoding ycbcr_enc;
+	enum v4l2_quantization quantization;
+	enum v4l2_hsv_encoding hsv_enc;
 
 	/* The below variable used only in Rtos */
 	void *mm_return_resource; /* Place holder for CB to application */
@@ -203,7 +221,7 @@ struct vxe_enc_ctx {
 	void *stream_worker_queue_sem_handle;
 	void *work;
 	struct vxe_enc_q_data q_data[2];
-
+	struct v4l2_ctrl_handler v4l2_ctrl_hdl;
 	struct sg_table above_mb_params_sgt[2];
 
 #ifdef ENABLE_PROFILING
diff --git a/drivers/media/platform/imagination/vxe-vxd/encoder/vxe_v4l2.c b/drivers/media/platform/imagination/vxe-vxd/encoder/vxe_v4l2.c
index 1e4767dd7ab4..35fb2b231a08 100644
--- a/drivers/media/platform/imagination/vxe-vxd/encoder/vxe_v4l2.c
+++ b/drivers/media/platform/imagination/vxe-vxd/encoder/vxe_v4l2.c
@@ -86,76 +86,6 @@ static struct vxe_enc_fmt vxe_enc_formats[] = {
 	},
 };
 
-/* Note: Arrange in order of ascending CID # to simplify QUERYCTRL */
-static struct vxe_ctrl controls[] = {
-	{
-		/*
-		 * idr_period
-		 *
-		 * Period between IDR frames. Default to 60 * framerate.
-		 * Since default framerate is 30fps, default to 1800 frames
-		 * between IDR frames. IDR frames are a special I frame in
-		 * H.264 that specifies no frame after the IDR frame can
-		 * reference any frame before the IDR frame.
-		 *
-		 * This period is in number of frames.
-		 * ex. Default: 1800
-		 * Every 1800 frames is an IDR frame. At 30fps this means there
-		 * is an IDR frame every 60 seconds.
-		 */
-		.cid = V4L2_CID_MPEG_VIDEO_GOP_SIZE,
-		.type = V4L2_CTRL_TYPE_INTEGER,
-		.name = "GOP size",
-		.minimum = 1,
-		.maximum = 7200,
-		.step = 1,
-		.default_value = 1800,
-		.compound = FALSE,
-	},
-	{
-		/*
-		 * bits_per_second
-		 *
-		 * Bits per second for the encode. This will be the final
-		 * bitrate of the encoded stream. Warning, setting this too
-		 * low results in extreme loss of quality and choppy output.
-		 *
-		 * This is specified in bits per second
-		 */
-		.cid = V4L2_CID_MPEG_VIDEO_BITRATE,
-		.type = V4L2_CTRL_TYPE_INTEGER,
-		.name = "Video Bitrate",
-		.minimum = 50000,
-		.maximum = 100000000,
-		.step = 1,
-		.default_value = 500000,
-		.compound = FALSE,
-	},
-	{
-		/*
-		 * intra_freq
-		 *
-		 * Period between I-frames. I-frames are complete frames that
-		 * do not need to reference any other frames to decode. Named
-		 * intra_freq instead of intra_period due to naming in
-		 * underlying topaz_api layers.
-		 *
-		 * This frequency is actually the period between I-frames.
-		 * ex. Default: 30
-		 * This means there is an I-frame every 30 frames. At 30fps
-		 * this would mean one I-frame every second.
-		 */
-		.cid = V4L2_CID_MPEG_VIDEO_H264_I_PERIOD,
-		.type = V4L2_CTRL_TYPE_INTEGER,
-		.name = "H264 I period",
-		.minimum = 1,
-		.maximum = 600,
-		.step = 1,
-		.default_value = 30,
-		.compound = FALSE,
-	},
-};
-
 static struct v4l2_fract frmivals[] = {
 	{
 		.numerator = 1,
@@ -197,11 +127,12 @@ static void vxe_eos(struct vxe_enc_ctx *ctx)
 
 static void vxe_return_resource(void *ctx_handle, enum vxe_cb_type type,
 				void *img_buf_ref, unsigned int size,
-	unsigned int coded_frm_cnt)
+	unsigned int coded_frm_cnt, enum img_frame_type frame_type)
 {
 	struct vxe_enc_ctx *ctx = ctx_handle;
 	struct device *dev = ctx->dev->dev;
 	struct vxe_buffer *buf;
+
 #ifdef ENABLE_PROFILING
 	struct timespec64 time;
 #endif
@@ -222,6 +153,15 @@ static void vxe_return_resource(void *ctx_handle, enum vxe_cb_type type,
 		       ctx->drv_lat.start_time, 1000));
 #endif
 
+		if (frame_type == IMG_INTRA_FRAME)
+			buf->buffer.vb.flags |= V4L2_BUF_FLAG_KEYFRAME;
+		else if (frame_type == IMG_INTER_P)
+			buf->buffer.vb.flags |= V4L2_BUF_FLAG_PFRAME;
+		else if (frame_type == IMG_INTER_B)
+			buf->buffer.vb.flags |= V4L2_BUF_FLAG_BFRAME;
+		else
+			buf->buffer.vb.flags |= V4L2_BUF_FLAG_KEYFRAME;
+
 		v4l2_m2m_buf_done(&buf->buffer.vb, VB2_BUF_STATE_DONE);
 
 		if ((coded_frm_cnt == ctx->last_frame_num) && (coded_frm_cnt != 0)) {
@@ -279,6 +219,11 @@ static void device_run(void *priv)
 		if (!src_vbuf)
 			dev_err(dev, "Next src buffer is null\n");
 
+		v4l2_m2m_buf_copy_metadata(src_vbuf, dst_vbuf, true);
+		dst_vbuf->vb2_buf.timestamp = src_vbuf->vb2_buf.timestamp;
+		dst_vbuf->field = V4L2_FIELD_NONE;
+		src_vbuf->field = V4L2_FIELD_NONE;
+
 		/* Handle EOS */
 		if (ctx->eos && (v4l2_m2m_num_src_bufs_ready(ctx->fh.m2m_ctx) == 0)) {
 			pr_debug("%s eos found\n", __func__);
@@ -577,6 +522,11 @@ static void vxe_buf_queue(struct vb2_buffer *vb)
 		vb2_set_plane_payload(&vbuf->vb2_buf, 0, 0);
 		v4l2_m2m_buf_done(vbuf, VB2_BUF_STATE_DONE);
 	} else {
+		if (vb->type == V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE)
+			vbuf->sequence = ctx->out_seq++;
+		else
+			vbuf->sequence = ctx->cap_seq++;
+
 		v4l2_m2m_buf_queue(ctx->fh.m2m_ctx, vbuf);
 	}
 	mutex_unlock((struct mutex *)ctx->mutex);
@@ -689,11 +639,56 @@ static int queue_init(void *priv, struct vb2_queue *src_vq,
 	return 0;
 }
 
+static inline struct vxe_enc_ctx *vxe_ctrl_to_ctx(struct v4l2_ctrl *vctrl)
+{
+	return container_of(vctrl->handler, struct vxe_enc_ctx, v4l2_ctrl_hdl);
+}
+
+static int vxe_enc_s_ctrl(struct v4l2_ctrl *ctrl)
+{
+	struct vxe_enc_ctx *ctx = vxe_ctrl_to_ctx(ctrl);
+
+#ifdef DEBUG_ENCODER_DRIVER
+	pr_debug("%s: name: %s | value: %d | id 0x%x | ctx 0x%p\n", __func__,
+					ctrl->name, ctrl->val, ctrl->id, ctx);
+#endif
+
+	switch (ctrl->id) {
+	case V4L2_CID_MPEG_VIDEO_GOP_SIZE:
+		ctx->vparams.idr_period = ctrl->val;
+		break;
+	case V4L2_CID_MPEG_VIDEO_BITRATE:
+		ctx->rc.bits_per_second = ctrl->val;
+		break;
+	case V4L2_CID_MPEG_VIDEO_H264_I_PERIOD:
+		ctx->rc.intra_freq = ctrl->val;
+		ctx->vparams.intra_cnt = ctrl->val;
+		break;
+	case V4L2_CID_MPEG_VIDEO_H264_PROFILE:
+		ctx->sh_params.profile = ctrl->val;
+		break;
+	case V4L2_CID_MPEG_VIDEO_H264_LEVEL:
+		ctx->sh_params.level = ctrl->val;
+		break;
+	case V4L2_CID_MIN_BUFFERS_FOR_OUTPUT:
+		break;
+	default:
+		break;
+	}
+
+	return 0;
+}
+
+static const struct v4l2_ctrl_ops vxe_enc_ctrl_ops = {
+	.s_ctrl = vxe_enc_s_ctrl,
+};
+
 static int vxe_open(struct file *file)
 {
 	struct vxe_dev *vxe = video_drvdata(file);
 	struct vxe_enc_ctx *ctx;
 	int i, ret = 0;
+	struct v4l2_ctrl_handler *v4l2_ctrl_hdl;
 
 	dev_dbg(vxe->dev, "%s:%d vxe %p\n", __func__, __LINE__, vxe);
 
@@ -705,6 +700,8 @@ static int vxe_open(struct file *file)
 		return -ENOMEM;
 	}
 
+	v4l2_ctrl_hdl = &ctx->v4l2_ctrl_hdl;
+
 	ctx->mutex = kzalloc(sizeof(*ctx->mutex), GFP_KERNEL);
 	if (!ctx->mutex)
 		return -ENOMEM;
@@ -719,9 +716,21 @@ static int vxe_open(struct file *file)
 	ctx->available_source_frames = 0;
 	ctx->frames_encoding = 0;
 	ctx->frame_num = 0;
+	ctx->rc.frame_rate = VXE_ENCODER_DEFAULT_FRAMERATE;
+	ctx->rc.initial_qp_i = VXE_ENCODER_INITIAL_QP_I;
 	ctx->out_queue.streaming = FALSE;
 	ctx->cap_queue.streaming = FALSE;
 
+	/* set the sequence numbers to zero */
+	ctx->cap_seq = 0;
+	ctx->out_seq = 0;
+
+	/* set some default widths and heights */
+	ctx->cap_queue.height = VXE_ENCODER_DEFAULT_HEIGHT;
+	ctx->cap_queue.width = VXE_ENCODER_DEFAULT_WIDTH;
+	ctx->out_queue.height = VXE_ENCODER_DEFAULT_HEIGHT;
+	ctx->out_queue.width = VXE_ENCODER_DEFAULT_WIDTH;
+
 	for (i = 0; i < ARRAY_SIZE(vxe_enc_formats); i++) {
 		if (vxe_enc_formats[i].type ==
 			V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE) {
@@ -737,6 +746,23 @@ static int vxe_open(struct file *file)
 		}
 	}
 
+	for (i = 0; i < ctx->cap_queue.fmt->num_planes; i++) {
+		ctx->cap_queue.size_image[i] = topaz_get_coded_buffer_max_size(NULL,
+									 ctx->cap_queue.fmt->fmt,
+									 ctx->cap_queue.width,
+									 ctx->cap_queue.height,
+									 &ctx->rc);
+
+		ctx->cap_queue.bytesperline[i] = 0;
+	}
+
+	for (i = 0; i < ctx->out_queue.fmt->num_planes; i++) {
+		ctx->out_queue.bytesperline[i] = vxe_get_stride(ctx->out_queue.width,
+						ctx->out_queue.fmt);
+		ctx->out_queue.size_image[i] = vxe_get_sizeimage(ctx->out_queue.bytesperline[i],
+						ctx->out_queue.height, ctx->out_queue.fmt, i);
+	}
+
 	v4l2_fh_init(&ctx->fh, video_devdata(file));
 	file->private_data = &ctx->fh;
 
@@ -746,6 +772,39 @@ static int vxe_open(struct file *file)
 		goto exit;
 	}
 
+	v4l2_ctrl_handler_init(v4l2_ctrl_hdl, 10);
+	v4l2_ctrl_new_std(v4l2_ctrl_hdl, &vxe_enc_ctrl_ops,
+			  V4L2_CID_MPEG_VIDEO_BITRATE,
+			  0, 700000000, 1, 100000);
+	v4l2_ctrl_new_std(v4l2_ctrl_hdl, &vxe_enc_ctrl_ops,
+			  V4L2_CID_MPEG_VIDEO_GOP_SIZE,
+			  0, 2047, 1, 30);
+	v4l2_ctrl_new_std_menu(v4l2_ctrl_hdl, &vxe_enc_ctrl_ops,
+			       V4L2_CID_MPEG_VIDEO_H264_PROFILE,
+			       V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_PREDICTIVE, 0,
+			       V4L2_MPEG_VIDEO_H264_PROFILE_BASELINE);
+	v4l2_ctrl_new_std_menu(v4l2_ctrl_hdl, &vxe_enc_ctrl_ops,
+			       V4L2_CID_MPEG_VIDEO_H264_LEVEL,
+			       V4L2_MPEG_VIDEO_H264_LEVEL_5_1, 0,
+			       V4L2_MPEG_VIDEO_H264_LEVEL_1_0);
+	v4l2_ctrl_new_std(v4l2_ctrl_hdl, &vxe_enc_ctrl_ops,
+			  V4L2_CID_MIN_BUFFERS_FOR_OUTPUT, 1, 32, 1, 2);
+
+	if (v4l2_ctrl_hdl->error) {
+		kfree(ctx->mutex);
+		kfree(ctx);
+		return -ENODEV;
+	}
+
+	ctx->fh.ctrl_handler = v4l2_ctrl_hdl;
+	v4l2_ctrl_handler_setup(v4l2_ctrl_hdl);
+
+	ctx->colorspace = V4L2_COLORSPACE_REC709;
+	ctx->ycbcr_enc = V4L2_YCBCR_ENC_DEFAULT;
+	ctx->hsv_enc = 0;
+	ctx->quantization = V4L2_QUANTIZATION_DEFAULT;
+	ctx->xfer_func = V4L2_XFER_FUNC_DEFAULT;
+
 	vxe_fill_default_params(ctx);
 
 	v4l2_fh_add(&ctx->fh);
@@ -799,8 +858,6 @@ static int vxe_querycap(struct file *file, void *priv,
 	strncpy(cap->driver, IMG_VXE_ENC_MODULE_NAME, sizeof(cap->driver) - 1);
 	strncpy(cap->card, IMG_VXE_ENC_MODULE_NAME, sizeof(cap->card) - 1);
 	snprintf(cap->bus_info, sizeof(cap->bus_info), "platform:%s", IMG_VXE_ENC_MODULE_NAME);
-	cap->device_caps = V4L2_CAP_VIDEO_M2M_MPLANE | V4L2_CAP_STREAMING;
-	cap->capabilities = cap->device_caps | V4L2_CAP_DEVICE_CAPS;
 	return 0;
 }
 
@@ -835,6 +892,8 @@ static int vxe_enum_fmt(struct file *file, void *priv, struct v4l2_fmtdesc *f)
 		return -EINVAL;
 
 	f->pixelformat = fmt->fourcc;
+	f->flags = 0;
+
 	return 0;
 }
 
@@ -862,6 +921,12 @@ static int vxe_g_fmt(struct file *file, void *priv, struct v4l2_format *f)
 	}
 	pix_mp->num_planes = queue->fmt->num_planes;
 
+	f->fmt.pix_mp.colorspace = ctx->colorspace;
+	f->fmt.pix_mp.ycbcr_enc = ctx->ycbcr_enc;
+	f->fmt.pix_mp.hsv_enc = ctx->hsv_enc;
+	f->fmt.pix_mp.quantization = ctx->quantization;
+	f->fmt.pix_mp.xfer_func = ctx->xfer_func;
+
 	return 0;
 }
 
@@ -870,14 +935,26 @@ static int vxe_try_fmt(struct file *file, void *priv, struct v4l2_format *f)
 	struct vxe_enc_ctx *ctx = file2ctx(file);
 	struct vxe_enc_fmt *fmt;
 	struct vxe_enc_q_data *queue;
-	int i;
+	int i, width, height;
 	struct v4l2_pix_format_mplane *pix_mp = &f->fmt.pix_mp;
 	struct v4l2_plane_pix_format *plane_fmt = pix_mp->plane_fmt;
 	struct img_rc_params rc;
 
+	/* spec ambiguity see: http://www.mail-archive.com/linux-media@vger.kernel.org/msg56550.html*/
 	fmt = find_format(f);
-	if (!fmt)
-		return -EINVAL;
+	if (!fmt) {
+		if (V4L2_TYPE_IS_OUTPUT(f->type))
+			f->fmt.pix_mp.pixelformat = V4L2_PIX_FMT_NV12;
+		else
+			f->fmt.pix_mp.pixelformat = V4L2_PIX_FMT_H264;
+		/* try again now we have a default pixel type */
+		fmt = find_format(f);
+		if (!fmt)
+			return -EINVAL;  /* this should never happen */
+	}
+
+	width = clamp_t(u32, f->fmt.pix_mp.width, VXE_ENCODER_MIN_WIDTH, VXE_ENCODER_MAX_WIDTH);
+	height = clamp_t(u32, f->fmt.pix_mp.height, VXE_ENCODER_MIN_HEIGHT, VXE_ENCODER_MAX_HEIGHT);
 
 	queue = get_queue(ctx, f->type);
 	if (!queue)
@@ -885,29 +962,40 @@ static int vxe_try_fmt(struct file *file, void *priv, struct v4l2_format *f)
 
 	if (V4L2_TYPE_IS_OUTPUT(f->type)) {
 		pix_mp->num_planes = fmt->num_planes;
-		pix_mp->flags = 0;
+		pix_mp->width = width;
+		pix_mp->height = height;
+
 		for (i = 0; i < fmt->num_planes; i++) {
 			plane_fmt[i].bytesperline = vxe_get_stride(pix_mp->width, fmt);
 			plane_fmt[i].sizeimage = vxe_get_sizeimage(plane_fmt[i].bytesperline,
 								   pix_mp->height, fmt, i);
 		}
 	} else {
-		pix_mp->flags = 0;
 		/* Worst case estimation of sizeimage
 		 *plane_fmt[0].sizeimage = ALIGN(pix_mp->width, HW_ALIGN) *
 		 *			 ALIGN(pix_mp->height, HW_ALIGN) * 2;
 		 */
-		/* TODO: This is the only thing that matters here, make sure this is correct */
+		pix_mp->num_planes = 1;
 		rc.initial_qp_i = 18;
 		plane_fmt[0].bytesperline = 0;
+		pix_mp->width = width;
+		pix_mp->height = height;
 		plane_fmt[0].sizeimage = topaz_get_coded_buffer_max_size(NULL, fmt->std,
 									 pix_mp->width,
 									 pix_mp->height,
 									 &rc);
+
+		f->fmt.pix_mp.colorspace = ctx->colorspace;
+		f->fmt.pix_mp.ycbcr_enc = ctx->ycbcr_enc;
+		f->fmt.pix_mp.hsv_enc = ctx->hsv_enc;
+		f->fmt.pix_mp.quantization = ctx->quantization;
+		f->fmt.pix_mp.xfer_func = ctx->xfer_func;
 	}
 
-	if (pix_mp->field == V4L2_FIELD_ANY)
-		pix_mp->field = V4L2_FIELD_NONE;
+	pix_mp->field = V4L2_FIELD_NONE;
+	pix_mp->flags = 0;
+	pix_mp->xfer_func = V4L2_XFER_FUNC_DEFAULT;
+	memset(&f->fmt.pix_mp.reserved, 0, sizeof(f->fmt.pix_mp.reserved));
 
 	return 0;
 }
@@ -922,6 +1010,12 @@ static int vxe_s_fmt(struct file *file, void *priv, struct v4l2_format *f)
 	unsigned int level_h264;
 	static int base_pipe;
 
+	pix_mp = &f->fmt.pix_mp;
+
+#ifdef DEBUG_ENCODER_DRIVER
+	pr_debug("entering %s with context %p\n", __func__, ctx);
+#endif
+
 	ret = vxe_try_fmt(file, priv, f);
 	if (ret)
 		return ret;
@@ -948,6 +1042,12 @@ static int vxe_s_fmt(struct file *file, void *priv, struct v4l2_format *f)
 		if (ctx->vparams.csc_preset != IMG_CSC_NONE)
 			ctx->vparams.enable_scaler = TRUE;
 
+		ctx->colorspace = f->fmt.pix_mp.colorspace;
+		ctx->ycbcr_enc = f->fmt.pix_mp.ycbcr_enc;
+		ctx->hsv_enc = f->fmt.pix_mp.hsv_enc;
+		ctx->quantization = f->fmt.pix_mp.quantization;
+		ctx->xfer_func = f->fmt.pix_mp.xfer_func;
+
 		pr_debug("img_video_params: format=%d\n", ctx->vparams.format);
 		pr_debug("img_video_params: source_width=%d\n", ctx->vparams.source_width);
 		pr_debug("img_video_params: source_frame_height=%d\n",
@@ -1192,7 +1292,11 @@ static int vxe_s_fmt(struct file *file, void *priv, struct v4l2_format *f)
 	pr_debug("s_fmt_flags=%#08x\n", ctx->s_fmt_flags);
 	if ((ctx->s_fmt_flags & S_FMT_FLAG_OUT_RECV) &&
 	    (ctx->s_fmt_flags & S_FMT_FLAG_CAP_RECV)) {
-		pr_debug("Calling topaz_stream_create()\n");
+		/* if the stream has already been created for this context */
+		/* better destroy the original, and create a new one */
+		if (ctx->s_fmt_flags & S_FMT_FLAG_STREAM_CREATED)
+			topaz_stream_destroy(ctx->topaz_str_context);
+
 		topaz_stream_create(ctx, &ctx->vparams, ((base_pipe++ % 2) ? 0 : 1), 2,
 				&ctx->rc, &ctx->topaz_str_context);
 
@@ -1216,19 +1320,16 @@ static int vxe_s_fmt(struct file *file, void *priv, struct v4l2_format *f)
 static int vxe_subscribe_event(struct v4l2_fh *fh,
 			       const struct v4l2_event_subscription *sub)
 {
-	if (sub->type != V4L2_EVENT_EOS)
+	switch (sub->type) {
+	case V4L2_EVENT_EOS:
+		return v4l2_event_subscribe(fh, sub, 0, NULL);
+	case V4L2_EVENT_SOURCE_CHANGE:
 		return -EINVAL;
-
-	v4l2_event_subscribe(fh, sub, 0, NULL);
-	return 0;
-}
-
-static int vxe_try_cmd(struct file *file, void *fh,
-		       struct v4l2_encoder_cmd *cmd)
-{
-	if (cmd->cmd != V4L2_DEC_CMD_STOP)
+	case V4L2_EVENT_CTRL:
+		return v4l2_ctrl_subscribe_event(fh, sub);
+	default:
 		return -EINVAL;
-	return 0;
+	}
 }
 
 static int vxe_cmd(struct file *file, void *fh, struct v4l2_encoder_cmd *cmd)
@@ -1261,282 +1362,32 @@ static int vxe_cmd(struct file *file, void *fh, struct v4l2_encoder_cmd *cmd)
 	return 0;
 }
 
-static int vxe_queryctrl(struct file *file, void *priv,
-			 struct v4l2_queryctrl *query)
-{
-	int i;
 
-	query->reserved[0] = 0;
-	query->reserved[1] = 0;
-
-	/* Enumerate controls */
-	if (query->id & V4L2_CTRL_FLAG_NEXT_CTRL) {
-		query->id &= ~V4L2_CTRL_FLAG_NEXT_CTRL;
-		for (i = 0; i < ARRAY_SIZE(controls); i++) {
-			if (!controls[i].compound && controls[i].cid > query->id) {
-				query->id = controls[i].cid;
-				query->type = controls[i].type;
-				strncpy(query->name, controls[i].name, sizeof(query->name));
-				query->minimum = controls[i].minimum;
-				query->maximum = controls[i].maximum;
-				query->step = controls[i].step;
-				query->default_value = controls[i].default_value;
-				query->flags = 0;
-				return 0;
-			}
-		}
-		return -EINVAL;
-	}
 
-	/* Return info on requested control */
-	for (i = 0; i < ARRAY_SIZE(controls); i++) {
-		if (controls[i].cid == query->id) {
-			query->id = controls[i].cid;
-			query->type = controls[i].type;
-			strncpy(query->name, controls[i].name, sizeof(query->name));
-			query->minimum = controls[i].minimum;
-			query->maximum = controls[i].maximum;
-			query->step = controls[i].step;
-			query->default_value = controls[i].default_value;
-			query->flags = 0;
-			return 0;
-		}
-	}
-
-	return -EINVAL;
-}
-
-static int vxe_query_ext_ctrl(struct file *file, void *priv,
-			      struct v4l2_query_ext_ctrl *query)
-{
-	unsigned int queryid;
-	int i, j;
-
-	query->reserved[0] = 0;
-	query->reserved[1] = 0;
-
-	/* Enumerate controls */
-	if ((query->id & V4L2_CTRL_FLAG_NEXT_CTRL) ||
-	    (query->id & V4L2_CTRL_FLAG_NEXT_COMPOUND)) {
-		queryid = query->id;
-		queryid &= ~V4L2_CTRL_FLAG_NEXT_CTRL;
-		queryid &= ~V4L2_CTRL_FLAG_NEXT_COMPOUND;
-		for (i = 0; i < ARRAY_SIZE(controls); i++) {
-			if (((!controls[i].compound && (query->id & V4L2_CTRL_FLAG_NEXT_CTRL)) ||
-			     (controls[i].compound &&
-				(query->id & V4L2_CTRL_FLAG_NEXT_COMPOUND))) &&
-				controls[i].cid > queryid) {
-				query->id = controls[i].cid;
-				query->type = controls[i].type;
-				strncpy(query->name, controls[i].name, sizeof(query->name));
-				query->minimum = controls[i].minimum;
-				query->maximum = controls[i].maximum;
-				query->step = controls[i].step;
-				query->default_value = controls[i].default_value;
-				/* Our supported controls use int values */
-				query->elem_size = 4;
-				query->elems  = 1;
-				query->nr_of_dims = 0;
-				for (j = 0; j < V4L2_CTRL_MAX_DIMS; j++)
-					query->dims[j] = 0;
-				query->flags = 0;
-				return 0;
-			}
-		}
-		return -EINVAL;
-	}
-
-	/* Return info on requested control */
-	for (i = 0; i < ARRAY_SIZE(controls); i++) {
-		if (controls[i].cid == query->id) {
-			query->id = controls[i].cid;
-			query->type = controls[i].type;
-			strncpy(query->name, controls[i].name, sizeof(query->name));
-			query->minimum = controls[i].minimum;
-			query->maximum = controls[i].maximum;
-			query->step = controls[i].step;
-			query->default_value = controls[i].default_value;
-			/* Our supported controls use int values */
-			query->elem_size = 4;
-			query->elems  = 1;
-			query->nr_of_dims = 0;
-			for (j = 0; j < V4L2_CTRL_MAX_DIMS; j++)
-				query->dims[j] = 0;
-			query->flags = 0;
-			return 0;
-		}
-	}
-
-	return -EINVAL;
-}
-
-static int vxe_g_ext_ctrls(struct file *file, void *priv,
-			   struct v4l2_ext_controls *ctrls)
-{
-	struct vxe_enc_ctx *ctx = file2ctx(file);
-	struct device *dev = ctx->dev->dev;
-	struct v4l2_queryctrl query;
-	int i;
-
-	ctrls->reserved[0] = 0;
-
-	if (ctrls->which == V4L2_CTRL_WHICH_DEF_VAL) {
-		for (i = 0; i < ctrls->count; i++) {
-			query.id = ctrls->controls[i].id;
-			if (vxe_queryctrl(NULL, NULL, &query)) {
-				dev_err(dev, "%s could not find default value for id=%#08x\n",
-					__func__, ctrls->controls[i].id);
-				return -EINVAL;
-			}
-			ctrls->controls[i].value = query.default_value;
-		}
-	}
-
-	for (i = 0; i < ctrls->count; i++) {
-		ctrls->controls[i].reserved2[0] = 0;
-
-		switch (ctrls->controls[i].id) {
-		case V4L2_CID_MPEG_VIDEO_GOP_SIZE:
-			ctrls->controls[i].size = 0;
-			ctrls->controls[i].value = ctx->vparams.idr_period;
-			break;
-		case V4L2_CID_MPEG_VIDEO_BITRATE:
-			ctrls->controls[i].size = 0;
-			ctrls->controls[i].value = ctx->rc.bits_per_second;
-			break;
-		case V4L2_CID_MPEG_VIDEO_H264_I_PERIOD:
-			ctrls->controls[i].size = 0;
-			ctrls->controls[i].value = ctx->rc.intra_freq;
-			break;
-		case V4L2_CID_MPEG_VIDEO_H264_PROFILE:
-			ctrls->controls[i].size = 0;
-			ctrls->controls[i].value = ctx->sh_params.profile;
-			break;
-		case V4L2_CID_MPEG_VIDEO_H264_LEVEL:
-			ctrls->controls[i].size = 0;
-			ctrls->controls[i].value = ctx->sh_params.level;
-			break;
-		default:
-			dev_err(dev, "%s Invalid control id %#08x\n",
-				__func__, ctrls->controls[i].id);
-			ctrls->error_idx = ctrls->count;
-			return -EINVAL;
-		}
-	}
-
-	return 0;
-}
-
-static int vxe_try_ext_ctrls(struct file *file, void *priv,
-			     struct v4l2_ext_controls *ctrls)
-{
-	struct vxe_enc_ctx *ctx = file2ctx(file);
-	struct device *dev = ctx->dev->dev;
-	struct v4l2_queryctrl query;
-	int i;
-
-	ctrls->reserved[0] = 0;
-
-	/* Can't write default values or support requests */
-	if (ctrls->which != V4L2_CTRL_WHICH_CUR_VAL)
-		return -EINVAL;
-
-	/* Cannot change values once context is created */
-	/* TODO: Handle controls after stream is created but before streamon */
-	if (ctx->s_fmt_flags & S_FMT_FLAG_STREAM_CREATED)
-		return -EBUSY;
-
-	for (i = 0; i < ctrls->count; i++) {
-		ctrls->controls[i].reserved2[0] = 0;
-
-		query.id = ctrls->controls[i].id;
-		if (vxe_queryctrl(NULL, NULL, &query)) {
-			dev_err(dev, "%s could not find control id=%#08x\n",
-				__func__, ctrls->controls[i].id);
-			ctrls->error_idx = i;
-			return -EINVAL;
-		}
-		if (ctrls->controls[i].value < query.minimum) {
-			dev_err(dev, "%s control id=%#08x value=%d less than minimum=%d\n",
-				__func__, ctrls->controls[i].id,
-				ctrls->controls[i].value, query.minimum);
-			ctrls->error_idx = i;
-			return -ERANGE;
-		}
-		if (ctrls->controls[i].value > query.maximum) {
-			dev_err(dev, "%s control id=%#08x value=%d greater than maximum=%d\n",
-				__func__, ctrls->controls[i].id,
-				ctrls->controls[i].value, query.maximum);
-			ctrls->error_idx = i;
-			return -ERANGE;
-		}
-	}
-
-	return 0;
-}
-
-static int vxe_s_ext_ctrls(struct file *file, void *priv,
-			   struct v4l2_ext_controls *ctrls)
+static int vxe_enum_framesizes(struct file *file, void *priv,
+			       struct v4l2_frmsizeenum *fsize)
 {
-	struct vxe_enc_ctx *ctx = file2ctx(file);
-	struct device *dev = ctx->dev->dev;
-	int i;
-	int ret;
-
-	ctrls->reserved[0] = 0;
+	int  i, found = 0;
 
-	if (ctrls->which != V4L2_CTRL_WHICH_CUR_VAL)
+	if (fsize->index != 0)
 		return -EINVAL;
 
-	/* Verify first with try_ext_ctrls */
-	ret = vxe_try_ext_ctrls(file, priv, ctrls);
-	if (ret) {
-		/* Indicate verification stage error */
-		ctrls->error_idx = ctrls->count;
-		return ret;
-	}
-
-	/* Set all values in this set of commands */
-	for (i = 0; i < ctrls->count; i++) {
-		ctrls->controls[i].reserved2[0] = 0;
-
-		switch (ctrls->controls[i].id) {
-		case V4L2_CID_MPEG_VIDEO_GOP_SIZE:
-			ctrls->controls[i].size = 0;
-			ctx->vparams.idr_period = ctrls->controls[i].value;
-			break;
-		case V4L2_CID_MPEG_VIDEO_BITRATE:
-			ctrls->controls[i].size = 0;
-			ctx->rc.bits_per_second = ctrls->controls[i].value;
-			break;
-		case V4L2_CID_MPEG_VIDEO_H264_I_PERIOD:
-			ctrls->controls[i].size = 0;
-			ctx->rc.intra_freq = ctrls->controls[i].value;
-			ctx->vparams.intra_cnt = ctrls->controls[i].value;
+	for (i = 0; i < ARRAY_SIZE(vxe_enc_formats); ++i) {
+		if (vxe_enc_formats[i].fourcc == fsize->pixel_format) {
+			found = 1;
 			break;
-		default:
-			dev_err(dev, "%s Invalid control id %#08x\n",
-				__func__, ctrls->controls[i].id);
-			ctrls->error_idx = i;
-			return -EINVAL;
 		}
 	}
-
-	return 0;
-}
-
-static int vxe_enum_framesizes(struct file *file, void *priv,
-			       struct v4l2_frmsizeenum *fsize)
-{
-	if (fsize->index != 0)
+	if (!found)
 		return -EINVAL;
 
+
 	fsize->type = V4L2_FRMSIZE_TYPE_CONTINUOUS;
-	fsize->stepwise.min_width = 1;
-	fsize->stepwise.max_width = 1920;
+	fsize->stepwise.min_width = VXE_ENCODER_MIN_WIDTH;
+	fsize->stepwise.max_width = VXE_ENCODER_MAX_WIDTH;
 	fsize->stepwise.step_width = 1;
-	fsize->stepwise.min_height = 1;
-	fsize->stepwise.max_height = 1080;
+	fsize->stepwise.min_height = VXE_ENCODER_MIN_HEIGHT;
+	fsize->stepwise.max_height = VXE_ENCODER_MAX_HEIGHT;
 	fsize->stepwise.step_height = 1;
 
 	fsize->reserved[0] = 0;
@@ -1548,16 +1399,32 @@ static int vxe_enum_framesizes(struct file *file, void *priv,
 static int vxe_enum_frameintervals(struct file *file, void *priv,
 				   struct v4l2_frmivalenum *fival)
 {
+	int i, found = 0;
 	if (fival->index)
 		return -EINVAL;
 
+	if (fival->width > VXE_ENCODER_MAX_WIDTH ||
+	    fival->width < VXE_ENCODER_MIN_WIDTH ||
+	    fival->height > VXE_ENCODER_MAX_HEIGHT ||
+	    fival->height < VXE_ENCODER_MIN_HEIGHT)
+		return -EINVAL;
+
+	for (i = 0; i < ARRAY_SIZE(vxe_enc_formats); ++i) {
+		if (vxe_enc_formats[i].fourcc == fival->pixel_format) {
+			found = 1;
+			break;
+		}
+	}
+	if (!found)
+		return -EINVAL;
+
 	fival->type = V4L2_FRMIVAL_TYPE_CONTINUOUS;
 	fival->stepwise.min = frmivals[0];
 	fival->stepwise.max = frmivals[1];
 	fival->stepwise.step = frmivals[1];
 
 	fival->reserved[0] = 0;
-	fival->reserved[1] = 1;
+	fival->reserved[1] = 0;
 
 	return 0;
 }
@@ -1644,15 +1511,9 @@ static const struct v4l2_ioctl_ops vxe_enc_ioctl_ops = {
 
 	.vidioc_subscribe_event = vxe_subscribe_event,
 	.vidioc_unsubscribe_event = v4l2_event_unsubscribe,
-	.vidioc_try_encoder_cmd = vxe_try_cmd,
+	.vidioc_try_encoder_cmd = v4l2_m2m_ioctl_try_encoder_cmd,
 	.vidioc_encoder_cmd = vxe_cmd,
 
-	.vidioc_queryctrl = vxe_queryctrl,
-	.vidioc_query_ext_ctrl = vxe_query_ext_ctrl,
-	.vidioc_g_ext_ctrls = vxe_g_ext_ctrls,
-	.vidioc_s_ext_ctrls = vxe_s_ext_ctrls,
-	.vidioc_try_ext_ctrls = vxe_try_ext_ctrls,
-
 	.vidioc_enum_framesizes = vxe_enum_framesizes,
 	.vidioc_enum_frameintervals = vxe_enum_frameintervals,
 
-- 
2.45.2

