From a2313a78eb2ed03046aae3ac604a49c0556ac839 Mon Sep 17 00:00:00 2001
From: Hari Nagalla <hnagalla@ti.com>
Date: Wed, 14 Feb 2024 12:53:22 -0600
Subject: [PATCH 075/130] remoteproc: k3-dsp: Introduce PM suspend/resume
 handlers

Introduce suspend/resume handling to dsp remoteproc driver. The driver
registers for pm notifications. On a SUSPEND_PREPARE event shutsdown
the remotecore and on a POST_SUSPEND event reboots the remote core.

Signed-off-by: Hari Nagalla <hnagalla@ti.com>
---
 drivers/remoteproc/ti_k3_dsp_remoteproc.c | 100 ++++++++++++++++++++++
 1 file changed, 100 insertions(+)

diff --git a/drivers/remoteproc/ti_k3_dsp_remoteproc.c b/drivers/remoteproc/ti_k3_dsp_remoteproc.c
index fe894a638426..778698ec0c50 100644
--- a/drivers/remoteproc/ti_k3_dsp_remoteproc.c
+++ b/drivers/remoteproc/ti_k3_dsp_remoteproc.c
@@ -6,7 +6,9 @@
  *	Suman Anna <s-anna@ti.com>
  */
 
+#include <linux/delay.h>
 #include <linux/io.h>
+#include <linux/iopoll.h>
 #include <linux/mailbox_client.h>
 #include <linux/module.h>
 #include <linux/of_device.h>
@@ -16,12 +18,38 @@
 #include <linux/remoteproc.h>
 #include <linux/reset.h>
 #include <linux/slab.h>
+#include <linux/suspend.h>
 
 #include "omap_remoteproc.h"
 #include "remoteproc_internal.h"
 #include "ti_sci_proc.h"
 #include "ti_k3_common.h"
 
+/* C7x TI-SCI Processor Status Flags */
+#define PROC_BOOT_STATUS_FLAG_CPU_WFE                   0x00000001
+#define PROC_BOOT_STATUS_FLAG_CPU_WFI                   0x00000002
+
+/**
+ * is_core_in_wfi - local utility function to check core status
+ * @kproc: remote core pointer used for checking core status
+ *
+ * This utility function is invoked by the shutdown sequence to ensure
+ * the remote core is in wfi, before asserting a reset.
+ */
+static int is_core_in_wfi(struct k3_rproc *core)
+{
+	int ret;
+	u64 boot_vec;
+	u32 cfg, ctrl, stat;
+
+	ret = ti_sci_proc_get_status(core->tsp, &boot_vec, &cfg, &ctrl, &stat);
+
+	if (ret < 0)
+		return 0;
+
+	return (stat & PROC_BOOT_STATUS_FLAG_CPU_WFI);
+}
+
 /**
  * k3_dsp_rproc_mbox_callback() - inbound mailbox message handler
  * @client: mailbox client pointer used for requesting the mailbox channel
@@ -57,6 +85,10 @@ static void k3_dsp_rproc_mbox_callback(struct mbox_client *client, void *data)
 	case RP_MBOX_ECHO_REPLY:
 		dev_info(dev, "received echo reply from %s\n", name);
 		break;
+	case RP_MBOX_SHUTDOWN_ACK:
+		dev_dbg(dev, "received shutdown_ack from %s\n", name);
+		complete(&kproc->shut_comp);
+		break;
 	default:
 		/* silently handle all other valid messages */
 		if (msg >= RP_MBOX_READY && msg < RP_MBOX_END_MSG)
@@ -157,6 +189,42 @@ static int k3_dsp_rproc_unprepare(struct rproc *rproc)
 	return ret;
 }
 
+/*
+ * PM notifier call.
+ * This is a callback function for PM notifications. On a resume completion
+ * i.e after all the resume driver calls are handled on PM_POST_SUSPEND,
+ * on a deep sleep the remote core is rebooted.
+ */
+static int dsp_pm_notifier_call(struct notifier_block *bl,
+				unsigned long state, void *unused)
+{
+	struct k3_rproc *kproc = container_of(bl, struct k3_rproc, pm_notifier);
+	struct device *dev = kproc->dev;
+
+	switch (state) {
+	case PM_HIBERNATION_PREPARE:
+	case PM_RESTORE_PREPARE:
+	case PM_SUSPEND_PREPARE:
+		if (!device_may_wakeup(kproc->dev))
+			if (rproc_shutdown(kproc->rproc)) {
+				dev_err(dev, "failed to shutdown remote core\n");
+				return NOTIFY_BAD;
+			}
+		kproc->rproc->state = RPROC_SUSPENDED;
+	break;
+	case PM_POST_HIBERNATION:
+	case PM_POST_RESTORE:
+	case PM_POST_SUSPEND:
+		if (kproc->rproc->state == RPROC_SUSPENDED) {
+			if (!device_may_wakeup(kproc->dev))
+				rproc_boot(kproc->rproc);
+			kproc->rproc->state = RPROC_RUNNING;
+		}
+	break;
+	}
+	return 0;
+}
+
 /*
  * Power up the DSP remote processor.
  *
@@ -207,10 +275,33 @@ static int k3_dsp_rproc_start(struct rproc *rproc)
  */
 static int k3_dsp_rproc_stop(struct rproc *rproc)
 {
+	unsigned long to = msecs_to_jiffies(3000);
 	struct k3_rproc *kproc = rproc->priv;
+	struct device *dev = kproc->dev;
+	unsigned long msg = RP_MBOX_SHUTDOWN;
+	u32 stat = 0;
+	int ret;
+
+	reinit_completion(&kproc->shut_comp);
+	ret = mbox_send_message(kproc->mbox, (void *)msg);
+	if (ret < 0) {
+		dev_err(dev, "PM mbox_send_message failed: %d\n", ret);
+			return ret;
+	}
+
+	ret = wait_for_completion_timeout(&kproc->shut_comp, to);
+	if (ret == 0) {
+		dev_err(dev, "%s: timedout waiting for rproc completion event\n", __func__);
+			return -EBUSY;
+	};
 
 	mbox_free_channel(kproc->mbox);
 
+	/* poll remote core's status, with a timeout of 2ms and 200us sleeps in between */
+	ret = readx_poll_timeout(is_core_in_wfi, kproc, stat, stat, 200, 2000);
+	if (ret)
+		return ret;
+
 	k3_rproc_reset(kproc);
 
 	return 0;
@@ -400,6 +491,12 @@ static int k3_dsp_rproc_probe(struct platform_device *pdev)
 
 	platform_set_drvdata(pdev, kproc);
 
+	/* Register pm notifiers */
+	dev_info(dev, "register pm nitifiers in remoteproc mode\n");
+	init_completion(&kproc->shut_comp);
+	kproc->pm_notifier.notifier_call = dsp_pm_notifier_call;
+	register_pm_notifier(&kproc->pm_notifier);
+
 	return 0;
 
 release_mem:
@@ -447,6 +544,9 @@ static int k3_dsp_rproc_remove(struct platform_device *pdev)
 		dev_err(dev, "failed to put ti_sci handle, ret = %d\n", ret);
 
 	k3_reserved_mem_exit(kproc);
+
+	unregister_pm_notifier(&kproc->pm_notifier);
+
 	rproc_free(kproc->rproc);
 
 	return 0;
-- 
2.43.1

