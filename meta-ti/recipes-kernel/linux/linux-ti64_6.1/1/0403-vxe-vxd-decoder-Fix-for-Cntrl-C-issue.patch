From e04e3cadbebaffa0a401dc44a81e9632574fe8a3 Mon Sep 17 00:00:00 2001
From: Prasanth Babu Mantena <p-mantena@ti.com>
Date: Tue, 25 Apr 2023 17:15:00 -0500
Subject: [PATCH 403/508] vxe-vxd: decoder: Fix for Cntrl+C issue

Handle interrupts and clean buffers which results in
clean exit process when Cntrl+C is encountered.

Signed-off-by: Prasanth Babu Mantena <p-mantena@ti.com>
Signed-off-by: Darren Etheridge <detheridge@ti.com>
---
 .../media/platform/img/vxe-vxd/decoder/vxd_v4l2.c | 35 +++++++++++++++++++
 1 file changed, 35 insertions(+)

diff --git a/drivers/media/platform/img/vxe-vxd/decoder/vxd_v4l2.c b/drivers/media/platform/img/vxe-vxd/decoder/vxd_v4l2.c
index e7233396c24d..736db4c78811 100644
--- a/drivers/media/platform/img/vxe-vxd/decoder/vxd_v4l2.c
+++ b/drivers/media/platform/img/vxe-vxd/decoder/vxd_v4l2.c
@@ -824,6 +824,7 @@ static int vxd_dec_start_streaming(struct vb2_queue *vq, unsigned int count)
 			return ret;
 		}
 		ctx->core_streaming = TRUE;
+		ctx->aborting = 0;
 	}
 
 	return 0;
@@ -841,6 +842,11 @@ static void vxd_dec_stop_streaming(struct vb2_queue *vq)
 	else
 		ctx->src_streaming = FALSE;
 
+	if (!ctx->stream_created) {
+		vxd_dec_return_all_buffers(ctx, vq, VB2_BUF_STATE_ERROR);
+		return;
+	}
+
 	if (ctx->core_streaming) {
 		core_stream_stop(ctx->res_str_id);
 		ctx->core_streaming = FALSE;
@@ -1042,9 +1048,38 @@ static int vxd_dec_release(struct file *file)
 	struct bspp_ddbuf_array_info *fw_pps = ctx->fw_pps;
 	int i, ret = 0;
 	struct vxd_dec_q_data *s_q_data;
+	struct list_head *list;
+	struct list_head *temp;
+	struct vxd_buffer *buf = NULL;
 
 	s_q_data = &ctx->q_data[Q_DATA_SRC];
+	if (ctx->core_streaming) {
+		core_stream_stop(ctx->res_str_id);
+		ctx->core_streaming = FALSE;
 
+		core_stream_flush(ctx->res_str_id, TRUE);
+	}
+
+	list_for_each(list, &ctx->out_buffers) {
+		buf = list_entry(list, struct vxd_buffer, list);
+		core_stream_unmap_buf_sg(buf->buf_map_id);
+		buf->mapped = FALSE;
+		__list_del_entry(&buf->list);
+	}
+
+	list_for_each_safe(list, temp, &ctx->reuse_queue) {
+		buf = list_entry(list, struct vxd_buffer, list);
+		core_stream_unmap_buf_sg(buf->buf_map_id);
+		buf->mapped = FALSE;
+		__list_del_entry(&buf->list);
+	}
+
+	list_for_each(list, &ctx->cap_buffers) {
+		buf = list_entry(list, struct vxd_buffer, list);
+		core_stream_unmap_buf_sg(buf->buf_map_id);
+		buf->mapped = FALSE;
+		__list_del_entry(&buf->list);
+	}
 	if (ctx->stream_created) {
 		bspp_stream_destroy(ctx->bspp_context);
 
-- 
2.41.0

