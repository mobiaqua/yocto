diff -urp org/YUVRGBdisplay.c git/YUVRGBdisplay.c
--- org/YUVRGBdisplay.c	2022-04-14 11:49:36.000000000 +0200
+++ git/YUVRGBdisplay.c	2022-04-14 17:28:15.000000000 +0200
@@ -41,9 +41,9 @@ struct YuvRgb {
 static void
 usage(char *name)
 {
-	MSG("Usage: %s -s <connector_id>:<mode> INFILE -W width -H height -c colorformat ", name);
-	MSG("example: %s -s 32:1280x800 file.yuv -W 176 -H 144 -c nv12 ", name);
-	MSG("example: %s --kmscube --connector 36 file.yuv -W 176 -H 144 -c nv12 ", name);
+	MSG("Usage: %s INFILE -W width -H height -c colorformat ", name);
+	MSG("example: %s file.yuv -W 176 -H 144 -c nv12 ", name);
+	MSG("example: %s --kmscube file.yuv -W 176 -H 144 -c nv12 ", name);
 	MSG("example: %s -w 800x480 file.rgb -W 352 -H 288 -c abgr32 ", name);
 	MSG("Test of YUVdisplay");
 	MSG("");
diff -urp org/capturevpedisplay.c git/capturevpedisplay.c
--- org/capturevpedisplay.c	2022-04-14 11:49:36.000000000 +0200
+++ git/capturevpedisplay.c	2022-04-14 17:28:42.000000000 +0200
@@ -231,7 +231,7 @@ int main(int argc, char *argv[])
 		printf (
 		"USAGE : <SRCWidth> <SRCHeight> <SRCFormat> "
 			"<DSTWidth> <DSTHeight> <DSTformat> "
-			"<interlace> <translen> -s <connector_id>:<mode>\n");
+			"<interlace> <translen>\n");
 
 		return 1;
 	}
diff -urp org/filevpedisplay.c git/filevpedisplay.c
--- org/filevpedisplay.c	2022-04-14 11:49:36.000000000 +0200
+++ git/filevpedisplay.c	2022-04-14 17:29:13.000000000 +0200
@@ -185,7 +185,7 @@ int main (int argc, char *argv[])
 		"USAGE : <SRCfilename> <SRCWidth> <SRCHeight> <SRCFormat> "
 			"<DSTWidth> <DSTHeight> <DSTformat> "
 			"<CropTop> <CropLeft> <CropWidth> <CropHeight> "
-			"<interlace> <translen> -s <connector_id>:<mode>\n"
+			"<interlace> <translen>\n"
 			"Note:\n<interlace>\n1 - Deinterlace Alternate frame type\n"
 			"2 - Deinterlace Sequence TB frame type\n");
 
diff -urp org/util/display-kms.c git/util/display-kms.c
--- org/util/display-kms.c	2022-04-14 11:49:36.000000000 +0200
+++ git/util/display-kms.c	2022-04-14 17:15:59.000000000 +0200
@@ -450,13 +450,18 @@ connector_find_mode(struct display *disp
 {
 	struct display_kms *disp_kms = to_display_kms(disp);
 	drmModeConnector *connector;
-	int i, j;
+	int i, j, area;
 
 	/* First, find the connector & mode */
 	c->mode = NULL;
 	for (i = 0; i < disp_kms->resources->count_connectors; i++) {
 		connector = drmModeGetConnector(disp->fd,
 				disp_kms->resources->connectors[i]);
+		if (connector->connection != DRM_MODE_CONNECTED) {
+			drmModeFreeConnector(connector);
+			continue;
+		}
+		c->id = connector->connector_id;
 
 		if (!connector) {
 			ERROR("could not get connector %i: %s",
@@ -470,15 +475,14 @@ connector_find_mode(struct display *disp
 			continue;
 		}
 
-		if (connector->connector_id != c->id) {
-			drmModeFreeConnector(connector);
-			continue;
-		}
-
-		for (j = 0; j < connector->count_modes; j++) {
-			c->mode = &connector->modes[j];
-			if (!strcmp(c->mode->name, c->mode_str))
-				break;
+		/* find highest resolution mode: */
+		for (j = 0, area = 0; j < connector->count_modes; j++) {
+			drmModeModeInfo *current_mode = &connector->modes[j];
+			int current_area = current_mode->hdisplay * current_mode->vdisplay;
+			if (current_area >= area) {
+				c->mode = current_mode;
+				area = current_area;
+			}
 		}
 
 		/* Found it, break out */
@@ -554,8 +558,6 @@ disp_kms_usage(void)
 	MSG("KMS Display Options:");
 	MSG("\t-1 \t\tforce single-plane buffers");
 	MSG("\t-t <tiled-mode>\t8, 16, 32, or auto");
-	MSG("\t-s <connector_id>:<mode>\tset a mode");
-	MSG("\t-s <connector_id>@<crtc_id>:<mode>\tset a mode");
 }
 
 struct display *
@@ -564,6 +566,7 @@ disp_kms_open(int argc, char **argv)
 	struct display_kms *disp_kms = NULL;
 	struct display *disp;
 	struct buffer **bufs;
+	struct connector *c;
 	int i;
 
 	disp_kms = calloc(1, sizeof(*disp_kms));
@@ -610,6 +613,10 @@ disp_kms_open(int argc, char **argv)
 
 	disp->multiplanar = true;
 
+	c = &disp_kms->connector[disp_kms->connectors_count++];
+	c->id = -1;
+	c->crtc = -1;
+
 	/* note: set args to NULL after we've parsed them so other modules know
 	 * that it is already parsed (since the arg parsing is decentralized)
 	 */
@@ -643,23 +650,6 @@ disp_kms_open(int argc, char **argv)
 				ERROR("invalid arg: %s", argv[i]);
 				goto fail;
 			}
-		} else if (!strcmp("-s", argv[i])) {
-			struct connector *connector =
-					&disp_kms->connector[disp_kms->connectors_count++];
-			connector->crtc = -1;
-			argv[i++] = NULL;
-			if (sscanf(argv[i], "%d:%64s",
-				   &connector->id,
-				   connector->mode_str) != 2 &&
-			    sscanf(argv[i], "%d@%d:%64s",
-				   &connector->id,
-				   &connector->crtc,
-				   connector->mode_str) != 3) {
-				// TODO: we could support connector specified as a name too, I suppose
-				ERROR("invalid arg: %s", argv[i]);
-				goto fail;
-			}
-			disp_kms->bo_flags |= OMAP_BO_SCANOUT;
 		} else if (!strcmp("-nm", argv[i])) {
 			disp_kms->no_master = true;
 			disp_kms->mastership = 1;
@@ -684,8 +674,8 @@ disp_kms_open(int argc, char **argv)
 		}
 	}
 
-	MSG("using %d connectors, %dx%d display, multiplanar: %d",
-			disp_kms->connectors_count, disp->width, disp->height, disp->multiplanar);
+	MSG("%dx%d display, multiplanar: %d",
+			disp->width, disp->height, disp->multiplanar);
 
 	bufs = disp_get_buffers(disp, 1);
 	disp_post_buffer(disp, bufs[0]);
diff -urp org/util/display-kmscube.c git/util/display-kmscube.c
--- org/util/display-kmscube.c	2022-04-14 11:49:38.000000000 +0200
+++ git/util/display-kmscube.c	2022-04-14 17:05:16.000000000 +0200
@@ -106,7 +106,6 @@ struct display_kmscube {
 		eglCreateImageKHR_t *eglCreateImageKHR;
 		eglDestroyImageKHR_t *eglDestroyImageKHR;
 		glEGLImageTargetTexture2DOES_t *glEGLImageTargetTexture2DOES;
-		float distance, fov;
 	} gl;
 
 	// GBM.
@@ -125,9 +124,6 @@ struct display_kmscube {
 		drmModePlaneRes *plane_resources;
 	} drm;
 
-	//user specified connector id
-	uint32_t user_connector_id;
-
 	uint32_t x, y, src_w, src_h, dst_w, dst_h;
 
 	int num_faces;
@@ -173,8 +169,7 @@ static int init_drm(struct display_kmscu
 	/* find a connected connector: */
 	for (i = 0; i < resources->count_connectors; i++) {
 		connector = drmModeGetConnector(disp_kmsc->base.fd, resources->connectors[i]);
-		if (connector->connection == DRM_MODE_CONNECTED && \
-		    connector->connector_id == disp_kmsc->user_connector_id) {
+		if (connector->connection == DRM_MODE_CONNECTED) {
 			/* it's connected, let's use this! */
 			break;
 		}
@@ -194,7 +189,7 @@ static int init_drm(struct display_kmscu
 	for (i = 0, area = 0; i < connector->count_modes; i++) {
 		drmModeModeInfo *current_mode = &connector->modes[i];
 		int current_area = current_mode->hdisplay * current_mode->vdisplay;
-		if (current_area > area) {
+		if (current_area >= area) {
 			disp_kmsc->drm.mode = current_mode;
 			area = current_area;
 		}
@@ -1026,10 +1021,7 @@ void
 disp_kmscube_usage(void)
 {
 	MSG("KMSCUBE Display Options:");
-	MSG("\t--distance <float>\tset cube distance (default 8.0)");
-	MSG("\t--fov <float>\tset field of vision (default 45.0)");
 	MSG("\t--kmscube\tEnable display kmscube (default: disabled)");
-	MSG("\t--connector <connector_id>\tset the connector ID (default: LCD)");
 }
 
 struct display *
@@ -1038,7 +1030,6 @@ disp_kmscube_open(int argc, char **argv)
 	struct display_kmscube *disp_kmsc = NULL;
 	struct display *disp;
 	int ret, i, enabled = 0;
-	float fov = 45, distance = 8, connector_id = 4;
 
 	/* note: set args to NULL after we've parsed them so other modules know
 	 * that it is already parsed (since the arg parsing is decentralized)
@@ -1046,25 +1037,6 @@ disp_kmscube_open(int argc, char **argv)
 	for (i = 1; i < argc; i++) {
 		if (!argv[i]) {
 			continue;
-		}
-		if (!strcmp("--distance", argv[i])) {
-			argv[i++] = NULL;
-			if (sscanf(argv[i], "%f", &distance) != 1) {
-				ERROR("invalid arg: %s", argv[i]);
-				goto fail;
-			}
-		} else if (!strcmp("--fov", argv[i])) {
-			argv[i++] = NULL;
-			if (sscanf(argv[i], "%f", &fov) != 1) {
-				ERROR("invalid arg: %s", argv[i]);
-				goto fail;
-			}
-		} else if (!strcmp("--connector", argv[i])) {
-			argv[i++] = NULL;
-			if (sscanf(argv[i], "%f", &connector_id) != 1) {
-				ERROR("invalid arg: %s", argv[i]);
-				goto fail;
-			}
 		} else if (!strcmp("--kmscube", argv[i])) {
 			enabled = 1;
 		} else {
@@ -1083,9 +1055,6 @@ disp_kmscube_open(int argc, char **argv)
 		ERROR("allocation failed");
 		goto fail;
 	}
-	disp_kmsc->gl.distance = distance;
-	disp_kmsc->gl.fov = fov;
-	disp_kmsc->user_connector_id = connector_id;
 	disp = &disp_kmsc->base;
 
 	for (i=0; i<MAX_FACES; i++) {
diff -urp org/yuvcopytest.c git/yuvcopytest.c
--- org/yuvcopytest.c	2022-04-14 11:49:36.000000000 +0200
+++ git/yuvcopytest.c	2022-04-14 17:30:11.000000000 +0200
@@ -56,8 +56,8 @@ struct decoder {
 static void
 usage(char *name)
 {
-	MSG("Usage: %s -s <connector_id>:<mode> INFILE -w width -h height", name);
-	MSG("example: %s -s 4:800x480 file.yuv -w 176 -h 144", name);
+	MSG("Usage: %s INFILE -w width -h height", name);
+	MSG("example: %s file.yuv -w 176 -h 144", name);
 	MSG("Test of universalCopy .");
 	MSG("");
 	MSG("yuvcopytest options:");
