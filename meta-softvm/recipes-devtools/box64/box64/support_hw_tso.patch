diff -urp old/src/dynarec/dynarec_helper.h new/src/dynarec/dynarec_helper.h
--- old/src/dynarec/dynarec_helper.h	2025-02-15 13:36:43
+++ new/src/dynarec/dynarec_helper.h	2025-02-15 13:34:51
@@ -167,7 +167,7 @@
 // Will be put at the end of the SEQ
 #define SMEND()                                                         \
     do {                                                                \
-        if (BOX64DRENV(dynarec_strongmem)) {                            \
+        if (BOX64DRENV(dynarec_strongmem) > 0) {                        \
             /* It's a SEQ, put a barrier here. */                       \
             if (dyn->smwrite) {                                         \
                 /* Check if the next instruction has a end loop mark */ \
diff -urp old/src/librarian/library.c new/src/librarian/library.c
--- old/src/librarian/library.c	2025-02-15 09:17:56
+++ new/src/librarian/library.c	2025-02-15 13:30:42
@@ -360,10 +360,12 @@ static int loadEmulatedLib(const char* libname, librar
         if(libname && BOX64ENV(dynarec_bleeding_edge) && strstr(libname, "libmonobdwgc-2.0.so")) {
             printf_dump(LOG_INFO, "MonoBleedingEdge detected, disable Dynarec BigBlock and enable Dynarec StrongMem\n");
             SET_BOX64ENV(dynarec_bigblock, 0);
+            if (BOX64ENV(dynarec_strongmem) != -1)
             SET_BOX64ENV(dynarec_strongmem, 1);
         }
         if(libname && BOX64ENV(dynarec_tbb) && strstr(libname, "libtbb.so")) {
             printf_dump(LOG_INFO, "libtbb detected, enable Dynarec StrongMem\n");
+            if (BOX64ENV(dynarec_strongmem) != -1)
             SET_BOX64ENV(dynarec_strongmem, 1);
         }
         #endif
@@ -371,6 +373,7 @@ static int loadEmulatedLib(const char* libname, librar
             #ifdef DYNAREC
             printf_dump(LOG_INFO, "libjvm detected, disable Dynarec BigBlock and enable Dynarec StrongMem, hide SSE 4.2\n");
             SET_BOX64ENV(dynarec_bigblock, 0);
+            if (BOX64ENV(dynarec_strongmem) != -1)
             SET_BOX64ENV(dynarec_strongmem, 1);
             #else
             printf_dump(LOG_INFO, "libjvm detected, hide SSE 4.2\n");
diff -urp old/src/tools/wine_tools.c new/src/tools/wine_tools.c
--- old/src/tools/wine_tools.c	2025-02-15 09:17:54
+++ new/src/tools/wine_tools.c	2025-02-15 13:32:17
@@ -163,6 +163,7 @@ void DetectUnityPlayer(int fd)
             printf_log(LOG_NONE, "Detected UnityPlayer.dll\n");
 #ifdef DYNAREC
             if (!BOX64ENV(dynarec_strongmem)) {
+                if (BOX64ENV(dynarec_strongmem) != -1)
                 SET_BOX64ENV(dynarec_strongmem, 1);
                 PrintEnvVariables(&box64env, LOG_INFO);
             }
diff --git a/src/main.c b/src/main.c
index 5f73ab4b..328cef9c 100644
--- a/src/main.c
+++ b/src/main.c
@@ -1,9 +1,59 @@
 #include "core.h"
+#include "debug.h"
+#include "env.h"
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <sys/prctl.h>
+
+void setupTSOEmulation(void) {
+  int result, box64_hw_tso = 1;
+  const char *p;
+#ifndef PR_GET_MEM_MODEL
+#define PR_GET_MEM_MODEL 0x6d4d444c
+#endif
+#ifndef PR_SET_MEM_MODEL
+#define PR_SET_MEM_MODEL 0x4d4d444c
+#endif
+#ifndef PR_SET_MEM_MODEL_DEFAULT
+#define PR_SET_MEM_MODEL_DEFAULT 0
+#endif
+#ifndef PR_SET_MEM_MODEL_TSO
+#define PR_SET_MEM_MODEL_TSO 1
+#endif
+  // Check to see if TSO is supported.
+  result = prctl(PR_GET_MEM_MODEL, 0, 0, 0, 0);
+  if(result == -1) {
+    perror("TSO not supported");
+    // Unsupported, early exit.
+    return;
+  }
+
+  p = getenv("BOX64_HW_TSO");
+  if(p) {
+    if(strlen(p)==1) {
+      if(p[0]>='0' && p[0]<='0'+1)
+        box64_hw_tso = p[0]-'0';
+    }
+  }
+  if(box64_hw_tso == 0)
+    return;
+
+  // Try to set the TSO mode if we are currently default.
+  result = prctl(PR_SET_MEM_MODEL, PR_SET_MEM_MODEL_TSO, 0, 0, 0);
+  if (result == 0) {
+    // TSO mode successfully enabled.
+    SET_BOX64ENV(dynarec_strongmem, -1);
+  }
+}
 
 int main(int argc, const char **argv, char **env) {
 
     x64emu_t* emu = NULL;
     elfheader_t* elf_header = NULL;
+
+    setupTSOEmulation();
+
     if (initialize(argc, argv, env, &emu, &elf_header, 1)) {
         return -1;
     }
