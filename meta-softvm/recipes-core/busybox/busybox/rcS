#!/bin/sh

#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#

ARGS=$(cat /proc/cmdline)
TOOLSDIR=`cmdline-parse "$ARGS" tdir`
WORKDIR=`cmdline-parse "$ARGS" wdir`
CURRENTDIR=`cmdline-parse "$ARGS" cdir`
CMD=`cmdline-parse "$ARGS" cmd`
NFSROOT=`cmdline-parse "$ARGS" nfsroot`

if [ -z "$NFSROOT" ]; then
    VM_EXIT=vm-exit
else
    VM_QEMU=1
    VM_EXIT=qemu-exit
fi

if [ ! -z $NFSROOT ]; then
    NFS_OPTS=$(echo $NFSROOT | sed 's/,/ /g')
    for param in $NFS_OPTS; do
        case "$param" in
            port=*)
            PORT=`echo "${param#port=}"`
            ;;
            mountport=*)
            MPORT=`echo "${param#mountport=}"`
            ;;
        esac
    done
fi

if [ -z "$CURRENTDIR" ] || [ -z "$CMD" ]; then
    echo "SEMIHOSTING: Wrong cmdline params!"
    $VM_EXIT 1
fi

if [ ! -z "$NFSROOT" ]; then
    IP_GW=`route -n | grep 'UG[ \t]' | awk '{print $2}'`
fi

if [ ! -z "$TOOLSDIR" ]; then
    mkdir -p /opt/tools
    if [ -z "$NFSROOT" ]; then
        mount -t virtiofs TOOLSFS /opt/tools
    else
        mount -t nfs -o nolock,vers=3,tcp,port=${PORT},mountport=${MPORT} ${IP_GW}:${TOOLSDIR} /opt/tools
    fi
    if [ $? -ne 0 ]; then
        echo "SEMIHOSTING: Failed mount tools dir share!"
        $VM_EXIT 1
    fi
fi


if [ "$WORKDIR" != "$CURRENTDIR" ]; then
    mkdir -p "$WORKDIR" 2> /dev/null
    if [ -z "$NFSROOT" ]; then
        mount -t virtiofs WORKSPACEFS ${WORKDIR}
    else
        mount -t nfs -o nolock,vers=3,tcp,port=${PORT},mountport=${MPORT} ${IP_GW}:${WORKDIR} ${WORKDIR}
    fi
    if [ $? -ne 0 ]; then
        echo "SEMIHOSTING: Failed mount work dir share!"
        $VM_EXIT 1
    fi
else
    mkdir -p "$CURRENTDIR" 2> /dev/null
    if [ -z "$NFSROOT" ]; then
        mount -t virtiofs CURRENTFS ${CURRENTDIR}
    else
        mount -t nfs -o nolock,vers=3,tcp,port=${PORT},mountport=${MPORT} ${IP_GW}:${CURRENTDIR} ${CURRENTDIR}
    fi
    if [ $? -ne 0 ]; then
        echo "SEMIHOSTING: Failed mount current dir share!"
        $VM_EXIT 1
    fi
fi


mkdir -p "$CURRENTDIR" 2> /dev/null
cd $CURRENTDIR
if [ $? -ne 0 ]; then
    echo "SEMIHOSTING: Failed change to working dir!"
    $VM_EXIT 1
fi

sh -c "$CMD"
ERR=$?

cd /

umount -f ${CURRENTDIR} 2> /dev/null
if [ $? -eq 0 ]; then
    rmdir -p "$CURRENTDIR" 2> /dev/null
fi

if [ "$WORKDIR" != "$CURRENTDIR" ]; then
    umount -f ${WORKDIR} 2> /dev/null
    if [ $? -eq 0 ]; then
        rmdir -p "$WORKDIR" 2> /dev/null
    fi
fi

if [ ! -z "$TOOLSDIR" ]; then
    umount -f /opt/tools 2> /dev/null
    if [ $? -eq 0 ]; then
        rmdir -p "$TOOLSDIR" 2> /dev/null
    fi
fi

$VM_EXIT $ERR
