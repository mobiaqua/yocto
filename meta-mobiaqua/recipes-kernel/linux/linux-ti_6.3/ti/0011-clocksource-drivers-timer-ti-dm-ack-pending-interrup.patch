From 6e260fc2770c157f81704b403e6e3d40e0e10f97 Mon Sep 17 00:00:00 2001
From: Kevin Hilman <khilman@baylibre.com>
Date: Mon, 19 Jul 2021 11:35:18 -0700
Subject: [PATCH] clocksource/drivers/timer-ti-dm: ack pending interrupt during
 suspend

It is possible that when suspending the clock event timer it will
generate an interrupt just before their suspend is completed, but
after interrupts have been disabled. In this case any pending
interrupts will prevent suspend, so ACK the timer interrupt to avoid
this.

Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
Signed-off-by: Tero Kristo <t-kristo@ti.com>
[khilman: migrated from mach-omap2 to clocksource driver]
Signed-off-by: Kevin Hilman <khilman@baylibre.com>
---
 drivers/clocksource/timer-ti-dm-systimer.c | 28 ++++++++++++++++++++++
 1 file changed, 28 insertions(+)

diff --git a/drivers/clocksource/timer-ti-dm-systimer.c b/drivers/clocksource/timer-ti-dm-systimer.c
index b6f97960d8ee..4f37e5366868 100644
--- a/drivers/clocksource/timer-ti-dm-systimer.c
+++ b/drivers/clocksource/timer-ti-dm-systimer.c
@@ -29,6 +29,8 @@
 static int counter_32k;
 static u32 clocksource;
 static u32 clockevent;
+static struct irq_chip *clkev_irq_chip;
+static struct irq_desc *clkev_irq_desc;
 
 /*
  * Subset of the timer registers we use. Note that the register offsets
@@ -507,12 +509,34 @@ static int dmtimer_set_periodic(struct clock_event_device *evt)
 	return 0;
 }
 
+static void omap_clockevent_late_ack(void)
+{
+	if (!clkev_irq_chip)
+		return;
+
+	if (clkev_irq_chip->irq_ack)
+		clkev_irq_chip->irq_ack(&clkev_irq_desc->irq_data);
+	if (clkev_irq_chip->irq_eoi)
+		clkev_irq_chip->irq_eoi(&clkev_irq_desc->irq_data);
+
+	clkev_irq_chip->irq_unmask(&clkev_irq_desc->irq_data);
+}
+
 static void omap_clockevent_idle(struct clock_event_device *evt)
 {
 	struct dmtimer_clockevent *clkevt = to_dmtimer_clockevent(evt);
 	struct dmtimer_systimer *t = &clkevt->t;
 
 	dmtimer_systimer_disable(t);
+
+	/*
+	 * It is possible for a late interrupt to be generated which will
+	 * cause a suspend failure. Let's ack it here both in the timer
+	 * and the interrupt controller to avoid this.
+	 */
+	writel_relaxed(OMAP_TIMER_INT_OVERFLOW, t->base + t->irq_stat);
+	omap_clockevent_late_ack();
+
 	clk_disable(t->fck);
 }
 
@@ -621,6 +645,10 @@ static int __init dmtimer_clockevent_init(struct device_node *np)
 	    of_machine_is_compatible("ti,am43")) {
 		clkevt->dev.suspend = omap_clockevent_idle;
 		clkevt->dev.resume = omap_clockevent_unidle;
+
+		clkev_irq_desc = irq_to_desc(clkevt->dev.irq);
+		if (clkev_irq_desc)
+			clkev_irq_chip = irq_desc_get_chip(clkev_irq_desc);
 	}
 
 	return 0;
-- 
2.32.0 (Apple Git-132)

