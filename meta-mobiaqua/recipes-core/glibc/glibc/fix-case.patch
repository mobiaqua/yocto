diff -urp old/Makeconfig new/Makeconfig
--- old/Makeconfig	2020-11-15 20:53:02.000000000 +0100
+++ new/Makeconfig	2020-11-15 21:04:37.000000000 +0100
@@ -565,7 +565,7 @@ link-libc-tests-rpath-link = $(link-libc
 endif  # build-hardcoded-path-in-tests
 
 link-libc-before-gnulib = $(common-objpfx)libc.so$(libc.so-version) \
-			  $(common-objpfx)$(patsubst %,$(libtype.oS),c) \
+			  $(common-objpfx)$(patsubst %,$(libtype.oF),c) \
 			  -Wl,--as-needed $(elf-objpfx)ld.so \
 			  -Wl,--no-as-needed
 link-libc = $(link-libc-before-gnulib) $(gnulib)
@@ -1002,7 +1002,7 @@ endif
 # to pass different flags for each flavor.
 libtypes = $(foreach o,$(object-suffixes-for-libc),$(libtype$o))
 # .op may be added to all-object-suffixes below.
-all-object-suffixes := .o .os .oS
+all-object-suffixes := .o .os .oF
 object-suffixes :=
 CPPFLAGS-.o = $(pic-default)
 # libc.a must be compiled with -fPIE/-fpie for static PIE.
@@ -1044,14 +1044,14 @@ object-suffixes-for-libc := $(object-suf
 
 ifeq (yes,$(build-shared))
 # Build special library that contains the static-only routines for libc.
-object-suffixes-for-libc += .oS
+object-suffixes-for-libc += .oF
 
 # Must build the routines as PIC, though, because they can end up in (users')
 # shared objects.  We don't want to use CFLAGS-os because users may, for
 # example, make that processor-specific.
-CFLAGS-.oS = $(CFLAGS-.o) $(PIC-ccflag) $(extra-nonshared-cflags)
-CPPFLAGS-.oS = $(CPPFLAGS-.o) -DPIC -DLIBC_NONSHARED=1
-libtype.oS = lib%_nonshared.a
+CFLAGS-.oF = $(CFLAGS-.o) $(PIC-ccflag) $(extra-nonshared-cflags)
+CPPFLAGS-.oF = $(CPPFLAGS-.o) -DPIC -DLIBC_NONSHARED=1
+libtype.oF = lib%_nonshared.a
 endif
 
 # The assembler can generate debug information too.
diff -urp old/Makerules new/Makerules
--- old/Makerules	2020-11-15 20:53:02.000000000 +0100
+++ new/Makerules	2020-11-15 21:05:10.000000000 +0100
@@ -485,7 +485,7 @@ static-only-routines =
 endif
 endif
 
-elide-routines.oS += $(filter-out $(static-only-routines),\
+elide-routines.oF += $(filter-out $(static-only-routines),\
 				  $(routines) $(aux) $(sysdep_routines))
 elide-routines.os += $(static-only-routines)
 
@@ -771,7 +771,7 @@ endif
 
 +depfiles := $(sources:.c=.d) \
 	     $(patsubst %.o,%.d,$(filter %.o,$(extra-objs:.os=.o))) \
-	     $(patsubst %.oS,%.d,$(filter %.oS,$(extra-objs))) \
+	     $(patsubst %.oF,%.d,$(filter %.oF,$(extra-objs))) \
 	     $(patsubst %.o,%.d,$(filter %.o,$(extra-test-objs:.os=.o))) \
 	     $(addsuffix .d,$(tests) $(tests-internal) $(xtests) $(test-srcs))
 ifeq ($(build-programs),yes)
@@ -1093,7 +1093,7 @@ ifndef subdir
 install: $(inst_libdir)/libc.so
 $(inst_libdir)/libc.so: $(common-objpfx)format.lds \
 			$(common-objpfx)libc.so$(libc.so-version) \
-			$(inst_libdir)/$(patsubst %,$(libtype.oS),\
+			$(inst_libdir)/$(patsubst %,$(libtype.oF),\
 						  $(libprefix)$(libc-name)) \
 			$(+force)
 	(echo '/* GNU ld script';\
@@ -1101,7 +1101,7 @@ $(inst_libdir)/libc.so: $(common-objpfx)
 	 echo '   the static library, so try that secondarily.  */';\
 	 cat $<; \
 	 echo 'GROUP ( $(slibdir)/libc.so$(libc.so-version)' \
-	      '$(libdir)/$(patsubst %,$(libtype.oS),$(libprefix)$(libc-name))'\
+	      '$(libdir)/$(patsubst %,$(libtype.oF),$(libprefix)$(libc-name))'\
 	      ' AS_NEEDED (' $(rtlddir)/$(rtld-installed-name) ') )' \
 	) > $@.new
 	mv -f $@.new $@
diff -urp old/extra-lib.mk new/extra-lib.mk
--- old/extra-lib.mk	2020-11-15 20:53:02.000000000 +0100
+++ new/extra-lib.mk	2020-11-15 21:05:57.000000000 +0100
@@ -16,7 +16,7 @@ object-suffixes-$(lib) := $(filter-out $
 
 ifneq (,$($(lib)-static-only-routines))
 ifneq (,$(filter yes%,$(build-shared)$($(lib).so-version)))
-object-suffixes-$(lib) += $(filter-out $($(lib)-inhibit-o),.oS)
+object-suffixes-$(lib) += $(filter-out $($(lib)-inhibit-o),.oF)
 endif
 endif
 
@@ -34,7 +34,7 @@ all-$(lib)-routines := $($(lib)-routines
 ifeq (,$(filter $(lib), $(extra-libs-noinstall)))
 install-lib += $(foreach o,$(object-suffixes-$(lib)),$(lib:lib%=$(libtype$o)))
 endif
-extra-objs += $(foreach o,$(filter-out .os .oS,$(object-suffixes-$(lib))),\
+extra-objs += $(foreach o,$(filter-out .os .oF,$(object-suffixes-$(lib))),\
 			$(patsubst %,%$o,$(filter-out \
 					   $($(lib)-shared-only-routines),\
 					   $(all-$(lib)-routines))))
@@ -42,8 +42,8 @@ ifneq (,$(filter .os,$(object-suffixes-$
 extra-objs += $(patsubst %,%.os,$(filter-out $($(lib)-static-only-routines),\
 					     $(all-$(lib)-routines)))
 endif
-ifneq (,$(filter .oS,$(object-suffixes-$(lib))))
-extra-objs += $(patsubst %,%.oS,$(filter $($(lib)-static-only-routines),\
+ifneq (,$(filter .oF,$(object-suffixes-$(lib))))
+extra-objs += $(patsubst %,%.oF,$(filter $($(lib)-static-only-routines),\
 					 $(all-$(lib)-routines)))
 endif
 alltypes-$(lib) := $(foreach o,$(object-suffixes-$(lib)),\
@@ -67,7 +67,7 @@ endif
 
 
 # Use o-iterator.mk to generate a rule for each flavor of library.
-ifneq (,$(filter-out .os .oS,$(object-suffixes-$(lib))))
+ifneq (,$(filter-out .os .oF,$(object-suffixes-$(lib))))
 define o-iterator-doit
 $(objpfx)$(patsubst %,$(libtype$o),$(lib:lib%=%)): \
   $(patsubst %,$(objpfx)%$o,\
@@ -75,7 +75,7 @@ $(objpfx)$(patsubst %,$(libtype$o),$(lib
 			  $(all-$(lib)-routines))); \
 	$$(build-extra-lib)
 endef
-object-suffixes-left = $(filter-out .os .oS,$(object-suffixes-$(lib)))
+object-suffixes-left = $(filter-out .os .oF,$(object-suffixes-$(lib)))
 include $(patsubst %,$(..)o-iterator.mk,$(object-suffixes-left))
 endif
 
@@ -87,9 +87,9 @@ $(objpfx)$(patsubst %,$(libtype.os),$(li
 	$(build-extra-lib)
 endif
 
-ifneq (,$(filter .oS,$(object-suffixes-$(lib))))
-$(objpfx)$(patsubst %,$(libtype.oS),$(lib:lib%=%)): \
-  $(patsubst %,$(objpfx)%.oS,\
+ifneq (,$(filter .oF,$(object-suffixes-$(lib))))
+$(objpfx)$(patsubst %,$(libtype.oF),$(lib:lib%=%)): \
+  $(patsubst %,$(objpfx)%.oF,\
 	     $(filter $($(lib)-static-only-routines),\
 		      $(all-$(lib)-routines)))
 	$(build-extra-lib)
