diff --git a/drivers/base/firmware_class.c b/drivers/base/firmware_class.c
index a95e1e57..1e1ba9ca 100644
--- a/drivers/base/firmware_class.c
+++ b/drivers/base/firmware_class.c
@@ -30,6 +30,7 @@
 #include <linux/syscore_ops.h>
 #include <linux/reboot.h>
 #include <linux/security.h>
+#include <linux/init.h>
 
 #include <generated/utsrelease.h>
 
@@ -334,6 +335,8 @@ fw_get_filesystem_firmware(struct device *device, struct firmware_buf *buf)
 	if (!path)
 		return -ENOMEM;
 
+	wait_for_rootfs();
+
 	for (i = 0; i < ARRAY_SIZE(fw_path); i++) {
 		/* skip the unset customized path */
 		if (!fw_path[i][0])
diff --git a/include/linux/init.h b/include/linux/init.h
index 0cca4142..251e36c2 100644
--- a/include/linux/init.h
+++ b/include/linux/init.h
@@ -132,6 +132,7 @@ void setup_arch(char **);
 void prepare_namespace(void);
 void __init load_default_modules(void);
 int __init init_rootfs(void);
+void wait_for_rootfs(void);
 
 #if defined(CONFIG_DEBUG_RODATA) || defined(CONFIG_DEBUG_SET_MODULE_RONX)
 extern bool rodata_enabled;
diff --git a/init/main.c b/init/main.c
index 7ad08957..3027964e 100644
--- a/init/main.c
+++ b/init/main.c
@@ -986,6 +986,25 @@ static int __ref kernel_init(void *unused)
 	      "See Linux Documentation/init.txt for guidance.");
 }
 
+static DECLARE_WAIT_QUEUE_HEAD(rootfs_waitq);
+static bool rootfs_mounted;
+
+void wait_for_rootfs(void)
+{
+	/* Avoid waiting for ourselves */
+	if (rootfs_mounted || WARN_ON(is_global_init(current)))
+		return;
+
+	wait_event(rootfs_waitq, rootfs_mounted);
+}
+EXPORT_SYMBOL(wait_for_rootfs);
+
+static inline void wake_up_rootfs_waiters(void)
+{
+	rootfs_mounted = true;
+	wake_up_all(&rootfs_waitq);
+}
+
 static noinline void __init kernel_init_freeable(void)
 {
 	/*
@@ -1047,6 +1066,8 @@ static noinline void __init kernel_init_freeable(void)
 	 * and default modules
 	 */
 
+	wake_up_rootfs_waiters();
+
 	integrity_load_keys();
 	load_default_modules();
 }
