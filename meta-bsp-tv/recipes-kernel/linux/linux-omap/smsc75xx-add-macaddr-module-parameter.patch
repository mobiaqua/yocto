diff --git a/drivers/net/usb/smsc75xx.c b/drivers/net/usb/smsc75xx.c
index 234febc..10a6fa1 100644
--- a/drivers/net/usb/smsc75xx.c
+++ b/drivers/net/usb/smsc75xx.c
@@ -70,6 +70,8 @@ struct smsc75xx_priv {
 	spinlock_t rfe_ctl_lock;
 	struct work_struct set_multicast;
 	u8 suspend_flags;
+	bool mac_set_from_param;
+	bool mac_is_random;
 };
 
 struct usb_context {
@@ -81,6 +83,11 @@ static bool turbo_mode = true;
 module_param(turbo_mode, bool, 0644);
 MODULE_PARM_DESC(turbo_mode, "Enable multiple frames per Rx transaction");
 
+static char *macaddr = ":";
+static bool set_macaddr = false;
+module_param(macaddr, charp, 0);
+MODULE_PARM_DESC(macaddr, "MAC address");
+
 static int smsc75xx_link_ok_nopm(struct usbnet *dev);
 static int smsc75xx_phy_gig_workaround(struct usbnet *dev);
 
@@ -765,8 +772,63 @@ static int smsc75xx_ioctl(struct net_device *netdev, struct ifreq *rq, int cmd)
 	return generic_mii_ioctl(&dev->mii, if_mii(rq), cmd, NULL);
 }
 
+/* set mac address from the macaddr module parameter */
+static int smsc75xx_init_mac_address_from_param(struct usbnet *dev)
+{
+	int i, j, got_num, num;
+	u8 mtbl[ETH_ALEN];
+	struct smsc75xx_priv *pdata = (struct smsc75xx_priv *)(dev->data[0]);
+
+	if (macaddr[0] == ':')
+		return 0;
+
+	i = 0;
+	j = 0;
+	num = 0;
+	got_num = 0;
+	while (j < ETH_ALEN) {
+		if (macaddr[i] && macaddr[i] != ':') {
+			got_num++;
+			if ('0' <= macaddr[i] && macaddr[i] <= '9')
+				num = num * 16 + macaddr[i] - '0';
+			else if ('A' <= macaddr[i] && macaddr[i] <= 'F')
+				num = num * 16 + 10 + macaddr[i] - 'A';
+			else if ('a' <= macaddr[i] && macaddr[i] <= 'f')
+				num = num * 16 + 10 + macaddr[i] - 'a';
+			else
+				break;
+			i++;
+		} else if (got_num == 2) {
+			mtbl[j++] = (u8) num;
+			num = 0;
+			got_num = 0;
+			i++;
+		} else {
+			break;
+		}
+	}
+
+	if (j == ETH_ALEN) {
+		netif_dbg(dev, ifup, dev->net, "Overriding MAC address with: "
+				"%02x:%02x:%02x:%02x:%02x:%02x\n", mtbl[0], mtbl[1], mtbl[2],
+				mtbl[3], mtbl[4], mtbl[5]);
+		for (i = 0; i < ETH_ALEN; i++)
+			dev->net->dev_addr[i] = mtbl[i];
+		set_macaddr = true;
+		pdata->mac_set_from_param = true;
+		pdata->mac_is_random = false;
+		return 0;
+	} else {
+		netif_dbg(dev, ifup, dev->net, "failed to parse (valid) MAC from smsc75xx.macaddr\n");
+		set_macaddr = true;
+		return 1;
+	}
+}
+
 static void smsc75xx_init_mac_address(struct usbnet *dev)
 {
+	struct smsc75xx_priv *pdata = (struct smsc75xx_priv *)(dev->data[0]);
+
 	/* try reading mac address from EEPROM */
 	if (smsc75xx_read_eeprom(dev, EEPROM_MAC_OFFSET, ETH_ALEN,
 			dev->net->dev_addr) == 0) {
@@ -780,16 +842,26 @@ static void smsc75xx_init_mac_address(struct usbnet *dev)
 
 	/* no eeprom, or eeprom values are invalid. generate random MAC */
 	eth_hw_addr_random(dev->net);
+	pdata->mac_is_random = true;
 	netif_dbg(dev, ifup, dev->net, "MAC address set to eth_random_addr\n");
 }
 
 static int smsc75xx_set_mac_address(struct usbnet *dev)
 {
-	u32 addr_lo = dev->net->dev_addr[0] | dev->net->dev_addr[1] << 8 |
+	struct smsc75xx_priv *pdata = (struct smsc75xx_priv *)(dev->data[0]);
+	u32 addr_lo, addr_hi;
+	int ret;
+
+	if (pdata->mac_is_random && !pdata->mac_set_from_param && !set_macaddr) {
+		netif_dbg(dev, ifup, dev->net, "random MAC address, not yet set from smsc75xx.macaddr, try to set it ...\n");
+		smsc75xx_init_mac_address_from_param(dev);
+	}
+
+	addr_lo = dev->net->dev_addr[0] | dev->net->dev_addr[1] << 8 |
 		dev->net->dev_addr[2] << 16 | dev->net->dev_addr[3] << 24;
-	u32 addr_hi = dev->net->dev_addr[4] | dev->net->dev_addr[5] << 8;
+	addr_hi = dev->net->dev_addr[4] | dev->net->dev_addr[5] << 8;
 
-	int ret = smsc75xx_write_reg(dev, RX_ADDRH, addr_hi);
+	ret = smsc75xx_write_reg(dev, RX_ADDRH, addr_hi);
 	if (ret < 0) {
 		netdev_warn(dev->net, "Failed to write RX_ADDRH: %d\n", ret);
 		return ret;
