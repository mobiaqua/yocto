From fb58532b2f9cf14ea006033eb95a45d3ef2a1b99 Mon Sep 17 00:00:00 2001
From: Tero Kristo <t-kristo@ti.com>
Date: Thu, 3 Feb 2022 22:30:38 -0800
Subject: [PATCH] iommu/omap: convert spinlocks to mutexes

Current spinlock heavy implementation of the omap-iommu causes some
sleeping while atomic warnings with lockdep debugging enabled. To fix
these, convert iommu_lock and domain lock into mutexes.

Signed-off-by: Tero Kristo <t-kristo@ti.com>
Signed-off-by: Suman Anna <s-anna@ti.com>
---
 drivers/iommu/omap-iommu.c | 22 +++++++++++-----------
 drivers/iommu/omap-iommu.h |  4 ++--
 2 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/drivers/iommu/omap-iommu.c b/drivers/iommu/omap-iommu.c
index 4728a40121cf..e2886204c880 100644
--- a/drivers/iommu/omap-iommu.c
+++ b/drivers/iommu/omap-iommu.c
@@ -848,7 +848,7 @@ static int omap_iommu_attach(struct omap_iommu *obj, u32 *iopgd)
 {
 	int err;
 
-	spin_lock(&obj->iommu_lock);
+	mutex_lock(&obj->iommu_lock);
 
 	obj->pd_dma = dma_map_single(obj->dev, iopgd, IOPGD_TABLE_SIZE,
 				     DMA_TO_DEVICE);
@@ -864,14 +864,14 @@ static int omap_iommu_attach(struct omap_iommu *obj, u32 *iopgd)
 		goto out_err;
 	flush_iotlb_all(obj);
 
-	spin_unlock(&obj->iommu_lock);
+	mutex_unlock(&obj->iommu_lock);
 
 	dev_dbg(obj->dev, "%s: %s\n", __func__, obj->name);
 
 	return 0;
 
 out_err:
-	spin_unlock(&obj->iommu_lock);
+	mutex_unlock(&obj->iommu_lock);
 
 	return err;
 }
@@ -885,7 +885,7 @@ static void omap_iommu_detach(struct omap_iommu *obj)
 	if (!obj || IS_ERR(obj))
 		return;
 
-	spin_lock(&obj->iommu_lock);
+	mutex_lock(&obj->iommu_lock);
 
 	dma_unmap_single(obj->dev, obj->pd_dma, IOPGD_TABLE_SIZE,
 			 DMA_TO_DEVICE);
@@ -893,7 +893,7 @@ static void omap_iommu_detach(struct omap_iommu *obj)
 	obj->iopgd = NULL;
 	iommu_disable(obj);
 
-	spin_unlock(&obj->iommu_lock);
+	mutex_unlock(&obj->iommu_lock);
 
 	dev_dbg(obj->dev, "%s: %s\n", __func__, obj->name);
 }
@@ -1212,7 +1212,7 @@ static int omap_iommu_probe(struct platform_device *pdev)
 	if (!obj->cr_ctx)
 		return -ENOMEM;
 
-	spin_lock_init(&obj->iommu_lock);
+	mutex_init(&obj->iommu_lock);
 	spin_lock_init(&obj->page_table_lock);
 
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
@@ -1480,7 +1480,7 @@ omap_iommu_attach_dev(struct iommu_domain *domain, struct device *dev)
 		return -EINVAL;
 	}
 
-	spin_lock(&omap_domain->lock);
+	mutex_lock(&omap_domain->lock);
 
 	/* only a single client device can be attached to a domain */
 	if (omap_domain->dev) {
@@ -1526,7 +1526,7 @@ omap_iommu_attach_dev(struct iommu_domain *domain, struct device *dev)
 init_fail:
 	omap_iommu_detach_fini(omap_domain);
 out:
-	spin_unlock(&omap_domain->lock);
+	mutex_unlock(&omap_domain->lock);
 	return ret;
 }
 
@@ -1574,9 +1574,9 @@ static void omap_iommu_detach_dev(struct iommu_domain *domain,
 {
 	struct omap_iommu_domain *omap_domain = to_omap_domain(domain);
 
-	spin_lock(&omap_domain->lock);
+	mutex_lock(&omap_domain->lock);
 	_omap_iommu_detach_dev(omap_domain, dev);
-	spin_unlock(&omap_domain->lock);
+	mutex_unlock(&omap_domain->lock);
 }
 
 static struct iommu_domain *omap_iommu_domain_alloc(unsigned type)
@@ -1590,7 +1590,7 @@ static struct iommu_domain *omap_iommu_domain_alloc(unsigned type)
 	if (!omap_domain)
 		return NULL;
 
-	spin_lock_init(&omap_domain->lock);
+	mutex_init(&omap_domain->lock);
 
 	omap_domain->domain.geometry.aperture_start = 0;
 	omap_domain->domain.geometry.aperture_end   = (1ULL << 32) - 1;
diff --git a/drivers/iommu/omap-iommu.h b/drivers/iommu/omap-iommu.h
index 3bc65a71d0b6..b8b94cdd8ee0 100644
--- a/drivers/iommu/omap-iommu.h
+++ b/drivers/iommu/omap-iommu.h
@@ -47,7 +47,7 @@ struct omap_iommu_domain {
 	u32 num_iommus;
 	struct omap_iommu_device *iommus;
 	struct device *dev;
-	spinlock_t lock;
+	struct mutex lock;
 	struct iommu_domain domain;
 };
 
@@ -60,7 +60,7 @@ struct omap_iommu {
 	struct dentry	*debug_dir;
 	const char *hwmod_mode;
 
-	spinlock_t	iommu_lock;	/* global for this whole object */
+	struct mutex	iommu_lock;	/* global for this whole object */
 
 	/*
 	 * We don't change iopgd for a situation like pgd for a task,
-- 
2.32.0 (Apple Git-132)

